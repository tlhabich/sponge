
SPONGE_PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004248  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080043dc  080043dc  000143dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043f4  080043f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080043f4  080043f4  000143f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043fc  080043fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043fc  080043fc  000143fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004400  08004400  00014400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  2000000c  08004410  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08004410  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c1a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019b8  00000000  00000000  00029c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e0  00000000  00000000  0002b610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000830  00000000  00000000  0002bef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e7b  00000000  00000000  0002c720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b111  00000000  00000000  0004259b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cdd3  00000000  00000000  0004d6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da47f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002418  00000000  00000000  000da4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080043c4 	.word	0x080043c4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080043c4 	.word	0x080043c4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fb46 	bl	8000b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f87c 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f964 	bl	80007b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004e8:	f000 f8e2 	bl	80006b0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80004ec:	f000 f932 	bl	8000754 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // read address pins
  addr_bits[0]= HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_12);
 80004f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f4:	4832      	ldr	r0, [pc, #200]	; (80005c0 <main+0xe8>)
 80004f6:	f001 fa53 	bl	80019a0 <HAL_GPIO_ReadPin>
 80004fa:	4603      	mov	r3, r0
 80004fc:	461a      	mov	r2, r3
 80004fe:	4b31      	ldr	r3, [pc, #196]	; (80005c4 <main+0xec>)
 8000500:	701a      	strb	r2, [r3, #0]
  addr_bits[1]= HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_13);
 8000502:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000506:	482e      	ldr	r0, [pc, #184]	; (80005c0 <main+0xe8>)
 8000508:	f001 fa4a 	bl	80019a0 <HAL_GPIO_ReadPin>
 800050c:	4603      	mov	r3, r0
 800050e:	461a      	mov	r2, r3
 8000510:	4b2c      	ldr	r3, [pc, #176]	; (80005c4 <main+0xec>)
 8000512:	705a      	strb	r2, [r3, #1]
  addr_bits[2]= HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14);
 8000514:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000518:	4829      	ldr	r0, [pc, #164]	; (80005c0 <main+0xe8>)
 800051a:	f001 fa41 	bl	80019a0 <HAL_GPIO_ReadPin>
 800051e:	4603      	mov	r3, r0
 8000520:	461a      	mov	r2, r3
 8000522:	4b28      	ldr	r3, [pc, #160]	; (80005c4 <main+0xec>)
 8000524:	709a      	strb	r2, [r3, #2]
  addr_bits[3]= HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15);
 8000526:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800052a:	4825      	ldr	r0, [pc, #148]	; (80005c0 <main+0xe8>)
 800052c:	f001 fa38 	bl	80019a0 <HAL_GPIO_ReadPin>
 8000530:	4603      	mov	r3, r0
 8000532:	461a      	mov	r2, r3
 8000534:	4b23      	ldr	r3, [pc, #140]	; (80005c4 <main+0xec>)
 8000536:	70da      	strb	r2, [r3, #3]
  //set address
  i2c.address = (addr_bits[3]<<3) + (addr_bits[2]<<2) + (addr_bits[1]<<1) + (addr_bits[0]);
 8000538:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <main+0xec>)
 800053a:	78db      	ldrb	r3, [r3, #3]
 800053c:	00db      	lsls	r3, r3, #3
 800053e:	b2da      	uxtb	r2, r3
 8000540:	4b20      	ldr	r3, [pc, #128]	; (80005c4 <main+0xec>)
 8000542:	789b      	ldrb	r3, [r3, #2]
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	b2db      	uxtb	r3, r3
 8000548:	4413      	add	r3, r2
 800054a:	b2da      	uxtb	r2, r3
 800054c:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <main+0xec>)
 800054e:	785b      	ldrb	r3, [r3, #1]
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	b2db      	uxtb	r3, r3
 8000554:	4413      	add	r3, r2
 8000556:	b2da      	uxtb	r2, r3
 8000558:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <main+0xec>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	4413      	add	r3, r2
 800055e:	b2da      	uxtb	r2, r3
 8000560:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <main+0xf0>)
 8000562:	745a      	strb	r2, [r3, #17]
  i2c.rxCallback = i2c_rx_callback;
 8000564:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <main+0xf0>)
 8000566:	4a19      	ldr	r2, [pc, #100]	; (80005cc <main+0xf4>)
 8000568:	615a      	str	r2, [r3, #20]
  i2c.hi2c = &hi2c1;
 800056a:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <main+0xf0>)
 800056c:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <main+0xf8>)
 800056e:	601a      	str	r2, [r3, #0]

  i2c_slave_init(&i2c);
 8000570:	4815      	ldr	r0, [pc, #84]	; (80005c8 <main+0xf0>)
 8000572:	f003 fe0d 	bl	8004190 <i2c_slave_init>
  i2c_slave_start(&i2c);
 8000576:	4814      	ldr	r0, [pc, #80]	; (80005c8 <main+0xf0>)
 8000578:	f003 fe3a 	bl	80041f0 <i2c_slave_start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1); // start ADC
 800057c:	4815      	ldr	r0, [pc, #84]	; (80005d4 <main+0xfc>)
 800057e:	f000 fbab 	bl	8000cd8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100); //Wait till ADC converted value
 8000582:	2164      	movs	r1, #100	; 0x64
 8000584:	4813      	ldr	r0, [pc, #76]	; (80005d4 <main+0xfc>)
 8000586:	f000 fc8e 	bl	8000ea6 <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc1); // store value
 800058a:	4812      	ldr	r0, [pc, #72]	; (80005d4 <main+0xfc>)
 800058c:	f000 fd16 	bl	8000fbc <HAL_ADC_GetValue>
 8000590:	4603      	mov	r3, r0
 8000592:	b29a      	uxth	r2, r3
 8000594:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <main+0x100>)
 8000596:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1); //stop ADC
 8000598:	480e      	ldr	r0, [pc, #56]	; (80005d4 <main+0xfc>)
 800059a:	f000 fc51 	bl	8000e40 <HAL_ADC_Stop>

	  i2c.sendBuffer[0]= adc_value & 0xFF; //buffer lower lower byte
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <main+0x100>)
 80005a0:	881a      	ldrh	r2, [r3, #0]
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <main+0xf0>)
 80005a4:	68db      	ldr	r3, [r3, #12]
 80005a6:	b2d2      	uxtb	r2, r2
 80005a8:	701a      	strb	r2, [r3, #0]
	  i2c.sendBuffer[1]= adc_value >> 8; //buffer upper byte
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <main+0x100>)
 80005ac:	881b      	ldrh	r3, [r3, #0]
 80005ae:	0a1b      	lsrs	r3, r3, #8
 80005b0:	b29a      	uxth	r2, r3
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <main+0xf0>)
 80005b4:	68db      	ldr	r3, [r3, #12]
 80005b6:	3301      	adds	r3, #1
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_Start(&hadc1); // start ADC
 80005bc:	e7de      	b.n	800057c <main+0xa4>
 80005be:	bf00      	nop
 80005c0:	40020400 	.word	0x40020400
 80005c4:	200000dc 	.word	0x200000dc
 80005c8:	200000c4 	.word	0x200000c4
 80005cc:	08000899 	.word	0x08000899
 80005d0:	20000070 	.word	0x20000070
 80005d4:	20000028 	.word	0x20000028
 80005d8:	200000e0 	.word	0x200000e0

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	; 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2230      	movs	r2, #48	; 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 fee2 	bl	80043b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	4b28      	ldr	r3, [pc, #160]	; (80006a8 <SystemClock_Config+0xcc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	4a27      	ldr	r2, [pc, #156]	; (80006a8 <SystemClock_Config+0xcc>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	; 0x40
 8000610:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b22      	ldr	r3, [pc, #136]	; (80006ac <SystemClock_Config+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000628:	4a20      	ldr	r2, [pc, #128]	; (80006ac <SystemClock_Config+0xd0>)
 800062a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063c:	2302      	movs	r3, #2
 800063e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000644:	2310      	movs	r3, #16
 8000646:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000648:	2302      	movs	r3, #2
 800064a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064c:	2300      	movs	r3, #0
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000650:	2308      	movs	r3, #8
 8000652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000654:	2350      	movs	r3, #80	; 0x50
 8000656:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800065c:	2304      	movs	r3, #4
 800065e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 0320 	add.w	r3, r7, #32
 8000664:	4618      	mov	r0, r3
 8000666:	f003 f8c9 	bl	80037fc <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000670:	f000 f938 	bl	80008e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000678:	2302      	movs	r3, #2
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000684:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	2102      	movs	r1, #2
 8000690:	4618      	mov	r0, r3
 8000692:	f003 fb2b 	bl	8003cec <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800069c:	f000 f922 	bl	80008e4 <Error_Handler>
  }
}
 80006a0:	bf00      	nop
 80006a2:	3750      	adds	r7, #80	; 0x50
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006b6:	463b      	mov	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006c2:	4b21      	ldr	r3, [pc, #132]	; (8000748 <MX_ADC1_Init+0x98>)
 80006c4:	4a21      	ldr	r2, [pc, #132]	; (800074c <MX_ADC1_Init+0x9c>)
 80006c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <MX_ADC1_Init+0x98>)
 80006ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006d0:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <MX_ADC1_Init+0x98>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006d6:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <MX_ADC1_Init+0x98>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_ADC1_Init+0x98>)
 80006de:	2200      	movs	r2, #0
 80006e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e2:	4b19      	ldr	r3, [pc, #100]	; (8000748 <MX_ADC1_Init+0x98>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ea:	4b17      	ldr	r3, [pc, #92]	; (8000748 <MX_ADC1_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_ADC1_Init+0x98>)
 80006f2:	4a17      	ldr	r2, [pc, #92]	; (8000750 <MX_ADC1_Init+0xa0>)
 80006f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_ADC1_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_ADC1_Init+0x98>)
 80006fe:	2201      	movs	r2, #1
 8000700:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_ADC1_Init+0x98>)
 8000704:	2200      	movs	r2, #0
 8000706:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_ADC1_Init+0x98>)
 800070c:	2201      	movs	r2, #1
 800070e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000710:	480d      	ldr	r0, [pc, #52]	; (8000748 <MX_ADC1_Init+0x98>)
 8000712:	f000 fa9d 	bl	8000c50 <HAL_ADC_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800071c:	f000 f8e2 	bl	80008e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000720:	2300      	movs	r3, #0
 8000722:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000724:	2301      	movs	r3, #1
 8000726:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072c:	463b      	mov	r3, r7
 800072e:	4619      	mov	r1, r3
 8000730:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_ADC1_Init+0x98>)
 8000732:	f000 fc51 	bl	8000fd8 <HAL_ADC_ConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800073c:	f000 f8d2 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000028 	.word	0x20000028
 800074c:	40012000 	.word	0x40012000
 8000750:	0f000001 	.word	0x0f000001

08000754 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_I2C1_Init+0x50>)
 800075a:	4a13      	ldr	r2, [pc, #76]	; (80007a8 <MX_I2C1_Init+0x54>)
 800075c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_I2C1_Init+0x50>)
 8000760:	4a12      	ldr	r2, [pc, #72]	; (80007ac <MX_I2C1_Init+0x58>)
 8000762:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_I2C1_Init+0x50>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 10;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_I2C1_Init+0x50>)
 800076c:	220a      	movs	r2, #10
 800076e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_I2C1_Init+0x50>)
 8000772:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000776:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <MX_I2C1_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_I2C1_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <MX_I2C1_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_I2C1_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_I2C1_Init+0x50>)
 8000792:	f001 f937 	bl	8001a04 <HAL_I2C_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800079c:	f000 f8a2 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000070 	.word	0x20000070
 80007a8:	40005400 	.word	0x40005400
 80007ac:	00061a80 	.word	0x00061a80

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b2f      	ldr	r3, [pc, #188]	; (8000888 <MX_GPIO_Init+0xd8>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a2e      	ldr	r2, [pc, #184]	; (8000888 <MX_GPIO_Init+0xd8>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b2c      	ldr	r3, [pc, #176]	; (8000888 <MX_GPIO_Init+0xd8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b28      	ldr	r3, [pc, #160]	; (8000888 <MX_GPIO_Init+0xd8>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a27      	ldr	r2, [pc, #156]	; (8000888 <MX_GPIO_Init+0xd8>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b25      	ldr	r3, [pc, #148]	; (8000888 <MX_GPIO_Init+0xd8>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b21      	ldr	r3, [pc, #132]	; (8000888 <MX_GPIO_Init+0xd8>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a20      	ldr	r2, [pc, #128]	; (8000888 <MX_GPIO_Init+0xd8>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <MX_GPIO_Init+0xd8>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f240 3101 	movw	r1, #769	; 0x301
 8000820:	481a      	ldr	r0, [pc, #104]	; (800088c <MX_GPIO_Init+0xdc>)
 8000822:	f001 f8d5 	bl	80019d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9;
 8000826:	f240 3301 	movw	r3, #769	; 0x301
 800082a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	4619      	mov	r1, r3
 800083e:	4813      	ldr	r0, [pc, #76]	; (800088c <MX_GPIO_Init+0xdc>)
 8000840:	f000 ff2a 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000844:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000848:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800084e:	2302      	movs	r3, #2
 8000850:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	4619      	mov	r1, r3
 8000858:	480d      	ldr	r0, [pc, #52]	; (8000890 <MX_GPIO_Init+0xe0>)
 800085a:	f000 ff1d 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800085e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000870:	2307      	movs	r3, #7
 8000872:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	4619      	mov	r1, r3
 800087a:	4806      	ldr	r0, [pc, #24]	; (8000894 <MX_GPIO_Init+0xe4>)
 800087c:	f000 ff0c 	bl	8001698 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000880:	bf00      	nop
 8000882:	3720      	adds	r7, #32
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40023800 	.word	0x40023800
 800088c:	40020800 	.word	0x40020800
 8000890:	40020400 	.word	0x40020400
 8000894:	40020000 	.word	0x40020000

08000898 <i2c_rx_callback>:

/* USER CODE BEGIN 4 */

void i2c_rx_callback(uint8_t* buf, uint8_t num_bytes) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	460b      	mov	r3, r1
 80008a2:	70fb      	strb	r3, [r7, #3]

	uint8_t cmd_v1 = buf[0];
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd_v2 = buf[1];
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	785b      	ldrb	r3, [r3, #1]
 80008ae:	73bb      	strb	r3, [r7, #14]

	// Add the code to control the valves
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, cmd_v1);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, cmd_v1);
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	461a      	mov	r2, r3
 80008b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b8:	4809      	ldr	r0, [pc, #36]	; (80008e0 <i2c_rx_callback+0x48>)
 80008ba:	f001 f889 	bl	80019d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, cmd_v2);
 80008be:	7bbb      	ldrb	r3, [r7, #14]
 80008c0:	461a      	mov	r2, r3
 80008c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c6:	4806      	ldr	r0, [pc, #24]	; (80008e0 <i2c_rx_callback+0x48>)
 80008c8:	f001 f882 	bl	80019d0 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,cmd_v1);
 80008cc:	7bfb      	ldrb	r3, [r7, #15]
 80008ce:	461a      	mov	r2, r3
 80008d0:	2101      	movs	r1, #1
 80008d2:	4803      	ldr	r0, [pc, #12]	; (80008e0 <i2c_rx_callback+0x48>)
 80008d4:	f001 f87c 	bl	80019d0 <HAL_GPIO_WritePin>



}
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40020800 	.word	0x40020800

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	e7fe      	b.n	80008ec <Error_Handler+0x8>
	...

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <HAL_MspInit+0x4c>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	4a0f      	ldr	r2, [pc, #60]	; (800093c <HAL_MspInit+0x4c>)
 8000900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000904:	6453      	str	r3, [r2, #68]	; 0x44
 8000906:	4b0d      	ldr	r3, [pc, #52]	; (800093c <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	4a08      	ldr	r2, [pc, #32]	; (800093c <HAL_MspInit+0x4c>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000920:	6413      	str	r3, [r2, #64]	; 0x40
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800

08000940 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	; 0x28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a17      	ldr	r2, [pc, #92]	; (80009bc <HAL_ADC_MspInit+0x7c>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d127      	bne.n	80009b2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <HAL_ADC_MspInit+0x80>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a15      	ldr	r2, [pc, #84]	; (80009c0 <HAL_ADC_MspInit+0x80>)
 800096c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <HAL_ADC_MspInit+0x80>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <HAL_ADC_MspInit+0x80>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <HAL_ADC_MspInit+0x80>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <HAL_ADC_MspInit+0x80>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800099a:	2301      	movs	r3, #1
 800099c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800099e:	2303      	movs	r3, #3
 80009a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <HAL_ADC_MspInit+0x84>)
 80009ae:	f000 fe73 	bl	8001698 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009b2:	bf00      	nop
 80009b4:	3728      	adds	r7, #40	; 0x28
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40012000 	.word	0x40012000
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020000 	.word	0x40020000

080009c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a21      	ldr	r2, [pc, #132]	; (8000a6c <HAL_I2C_MspInit+0xa4>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d13b      	bne.n	8000a62 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <HAL_I2C_MspInit+0xa8>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a1f      	ldr	r2, [pc, #124]	; (8000a70 <HAL_I2C_MspInit+0xa8>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <HAL_I2C_MspInit+0xa8>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a06:	23c0      	movs	r3, #192	; 0xc0
 8000a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a0a:	2312      	movs	r3, #18
 8000a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a16:	2304      	movs	r3, #4
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4814      	ldr	r0, [pc, #80]	; (8000a74 <HAL_I2C_MspInit+0xac>)
 8000a22:	f000 fe39 	bl	8001698 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <HAL_I2C_MspInit+0xa8>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a10      	ldr	r2, [pc, #64]	; (8000a70 <HAL_I2C_MspInit+0xa8>)
 8000a30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <HAL_I2C_MspInit+0xa8>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	201f      	movs	r0, #31
 8000a48:	f000 fdbf 	bl	80015ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a4c:	201f      	movs	r0, #31
 8000a4e:	f000 fdd8 	bl	8001602 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	2020      	movs	r0, #32
 8000a58:	f000 fdb7 	bl	80015ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a5c:	2020      	movs	r0, #32
 8000a5e:	f000 fdd0 	bl	8001602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	; 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40005400 	.word	0x40005400
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020400 	.word	0x40020400

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <NMI_Handler+0x4>

08000a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac4:	f000 f8a4 	bl	8000c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <I2C1_EV_IRQHandler+0x10>)
 8000ad2:	f001 f9f7 	bl	8001ec4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000070 	.word	0x20000070

08000ae0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <I2C1_ER_IRQHandler+0x10>)
 8000ae6:	f001 fb5e 	bl	80021a6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000070 	.word	0x20000070

08000af4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <SystemInit+0x20>)
 8000afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afe:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <SystemInit+0x20>)
 8000b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b1c:	480d      	ldr	r0, [pc, #52]	; (8000b54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b1e:	490e      	ldr	r1, [pc, #56]	; (8000b58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b20:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b32:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b34:	4c0b      	ldr	r4, [pc, #44]	; (8000b64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b42:	f7ff ffd7 	bl	8000af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b46:	f003 fc11 	bl	800436c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4a:	f7ff fcc5 	bl	80004d8 <main>
  bx  lr    
 8000b4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b50:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b5c:	08004404 	.word	0x08004404
  ldr r2, =_sbss
 8000b60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b64:	200001ec 	.word	0x200001ec

08000b68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC_IRQHandler>
	...

08000b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b70:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_Init+0x40>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0d      	ldr	r2, [pc, #52]	; (8000bac <HAL_Init+0x40>)
 8000b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <HAL_Init+0x40>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <HAL_Init+0x40>)
 8000b82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_Init+0x40>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a07      	ldr	r2, [pc, #28]	; (8000bac <HAL_Init+0x40>)
 8000b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b94:	2003      	movs	r0, #3
 8000b96:	f000 fd0d 	bl	80015b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9a:	200f      	movs	r0, #15
 8000b9c:	f000 f808 	bl	8000bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba0:	f7ff fea6 	bl	80008f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023c00 	.word	0x40023c00

08000bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_InitTick+0x54>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_InitTick+0x58>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 fd25 	bl	800161e <HAL_SYSTICK_Config>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e00e      	b.n	8000bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b0f      	cmp	r3, #15
 8000be2:	d80a      	bhi.n	8000bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be4:	2200      	movs	r2, #0
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 fced 	bl	80015ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf0:	4a06      	ldr	r2, [pc, #24]	; (8000c0c <HAL_InitTick+0x5c>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e000      	b.n	8000bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000000 	.word	0x20000000
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20000004 	.word	0x20000004

08000c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x20>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_IncTick+0x24>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <HAL_IncTick+0x24>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008
 8000c34:	200000e4 	.word	0x200000e4

08000c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <HAL_GetTick+0x14>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	200000e4 	.word	0x200000e4

08000c50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d101      	bne.n	8000c66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e033      	b.n	8000cce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d109      	bne.n	8000c82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff fe66 	bl	8000940 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2200      	movs	r2, #0
 8000c78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f003 0310 	and.w	r3, r3, #16
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d118      	bne.n	8000cc0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c96:	f023 0302 	bic.w	r3, r3, #2
 8000c9a:	f043 0202 	orr.w	r2, r3, #2
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f000 faba 	bl	800121c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f023 0303 	bic.w	r3, r3, #3
 8000cb6:	f043 0201 	orr.w	r2, r3, #1
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	641a      	str	r2, [r3, #64]	; 0x40
 8000cbe:	e001      	b.n	8000cc4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d101      	bne.n	8000cf2 <HAL_ADC_Start+0x1a>
 8000cee:	2302      	movs	r3, #2
 8000cf0:	e097      	b.n	8000e22 <HAL_ADC_Start+0x14a>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d018      	beq.n	8000d3a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	689a      	ldr	r2, [r3, #8]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f042 0201 	orr.w	r2, r2, #1
 8000d16:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d18:	4b45      	ldr	r3, [pc, #276]	; (8000e30 <HAL_ADC_Start+0x158>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a45      	ldr	r2, [pc, #276]	; (8000e34 <HAL_ADC_Start+0x15c>)
 8000d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d22:	0c9a      	lsrs	r2, r3, #18
 8000d24:	4613      	mov	r3, r2
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	4413      	add	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000d2c:	e002      	b.n	8000d34 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	3b01      	subs	r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f9      	bne.n	8000d2e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d15f      	bne.n	8000e08 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d50:	f023 0301 	bic.w	r3, r3, #1
 8000d54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d007      	beq.n	8000d7a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d86:	d106      	bne.n	8000d96 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8c:	f023 0206 	bic.w	r2, r3, #6
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	645a      	str	r2, [r3, #68]	; 0x44
 8000d94:	e002      	b.n	8000d9c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000da4:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <HAL_ADC_Start+0x160>)
 8000da6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000db0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 031f 	and.w	r3, r3, #31
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d10f      	bne.n	8000dde <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d129      	bne.n	8000e20 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	689a      	ldr	r2, [r3, #8]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	e020      	b.n	8000e20 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a16      	ldr	r2, [pc, #88]	; (8000e3c <HAL_ADC_Start+0x164>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d11b      	bne.n	8000e20 <HAL_ADC_Start+0x148>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d114      	bne.n	8000e20 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	e00b      	b.n	8000e20 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	f043 0210 	orr.w	r2, r3, #16
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e18:	f043 0201 	orr.w	r2, r3, #1
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000000 	.word	0x20000000
 8000e34:	431bde83 	.word	0x431bde83
 8000e38:	40012300 	.word	0x40012300
 8000e3c:	40012000 	.word	0x40012000

08000e40 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d101      	bne.n	8000e56 <HAL_ADC_Stop+0x16>
 8000e52:	2302      	movs	r3, #2
 8000e54:	e021      	b.n	8000e9a <HAL_ADC_Stop+0x5a>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	689a      	ldr	r2, [r3, #8]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f022 0201 	bic.w	r2, r2, #1
 8000e6c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d109      	bne.n	8000e90 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e84:	f023 0301 	bic.w	r3, r3, #1
 8000e88:	f043 0201 	orr.w	r2, r3, #1
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b084      	sub	sp, #16
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ec2:	d113      	bne.n	8000eec <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ed2:	d10b      	bne.n	8000eec <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	f043 0220 	orr.w	r2, r3, #32
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e063      	b.n	8000fb4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000eec:	f7ff fea4 	bl	8000c38 <HAL_GetTick>
 8000ef0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000ef2:	e021      	b.n	8000f38 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000efa:	d01d      	beq.n	8000f38 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d007      	beq.n	8000f12 <HAL_ADC_PollForConversion+0x6c>
 8000f02:	f7ff fe99 	bl	8000c38 <HAL_GetTick>
 8000f06:	4602      	mov	r2, r0
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d212      	bcs.n	8000f38 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d00b      	beq.n	8000f38 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	f043 0204 	orr.w	r2, r3, #4
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e03d      	b.n	8000fb4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d1d6      	bne.n	8000ef4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f06f 0212 	mvn.w	r2, #18
 8000f4e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d123      	bne.n	8000fb2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d11f      	bne.n	8000fb2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f78:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d006      	beq.n	8000f8e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d111      	bne.n	8000fb2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d105      	bne.n	8000fb2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f043 0201 	orr.w	r2, r3, #1
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d101      	bne.n	8000ff4 <HAL_ADC_ConfigChannel+0x1c>
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	e105      	b.n	8001200 <HAL_ADC_ConfigChannel+0x228>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b09      	cmp	r3, #9
 8001002:	d925      	bls.n	8001050 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	68d9      	ldr	r1, [r3, #12]
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	b29b      	uxth	r3, r3
 8001010:	461a      	mov	r2, r3
 8001012:	4613      	mov	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	4413      	add	r3, r2
 8001018:	3b1e      	subs	r3, #30
 800101a:	2207      	movs	r2, #7
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43da      	mvns	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	400a      	ands	r2, r1
 8001028:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	68d9      	ldr	r1, [r3, #12]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	b29b      	uxth	r3, r3
 800103a:	4618      	mov	r0, r3
 800103c:	4603      	mov	r3, r0
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4403      	add	r3, r0
 8001042:	3b1e      	subs	r3, #30
 8001044:	409a      	lsls	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	430a      	orrs	r2, r1
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	e022      	b.n	8001096 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6919      	ldr	r1, [r3, #16]
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	b29b      	uxth	r3, r3
 800105c:	461a      	mov	r2, r3
 800105e:	4613      	mov	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	2207      	movs	r2, #7
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43da      	mvns	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	400a      	ands	r2, r1
 8001072:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6919      	ldr	r1, [r3, #16]
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	b29b      	uxth	r3, r3
 8001084:	4618      	mov	r0, r3
 8001086:	4603      	mov	r3, r0
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4403      	add	r3, r0
 800108c:	409a      	lsls	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	430a      	orrs	r2, r1
 8001094:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2b06      	cmp	r3, #6
 800109c:	d824      	bhi.n	80010e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	4613      	mov	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	3b05      	subs	r3, #5
 80010b0:	221f      	movs	r2, #31
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43da      	mvns	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	400a      	ands	r2, r1
 80010be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	4618      	mov	r0, r3
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	3b05      	subs	r3, #5
 80010da:	fa00 f203 	lsl.w	r2, r0, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	430a      	orrs	r2, r1
 80010e4:	635a      	str	r2, [r3, #52]	; 0x34
 80010e6:	e04c      	b.n	8001182 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b0c      	cmp	r3, #12
 80010ee:	d824      	bhi.n	800113a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	3b23      	subs	r3, #35	; 0x23
 8001102:	221f      	movs	r2, #31
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43da      	mvns	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	400a      	ands	r2, r1
 8001110:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	b29b      	uxth	r3, r3
 800111e:	4618      	mov	r0, r3
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	3b23      	subs	r3, #35	; 0x23
 800112c:	fa00 f203 	lsl.w	r2, r0, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	430a      	orrs	r2, r1
 8001136:	631a      	str	r2, [r3, #48]	; 0x30
 8001138:	e023      	b.n	8001182 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	3b41      	subs	r3, #65	; 0x41
 800114c:	221f      	movs	r2, #31
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43da      	mvns	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	400a      	ands	r2, r1
 800115a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	b29b      	uxth	r3, r3
 8001168:	4618      	mov	r0, r3
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	4613      	mov	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	3b41      	subs	r3, #65	; 0x41
 8001176:	fa00 f203 	lsl.w	r2, r0, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	430a      	orrs	r2, r1
 8001180:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001182:	4b22      	ldr	r3, [pc, #136]	; (800120c <HAL_ADC_ConfigChannel+0x234>)
 8001184:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a21      	ldr	r2, [pc, #132]	; (8001210 <HAL_ADC_ConfigChannel+0x238>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d109      	bne.n	80011a4 <HAL_ADC_ConfigChannel+0x1cc>
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b12      	cmp	r3, #18
 8001196:	d105      	bne.n	80011a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a19      	ldr	r2, [pc, #100]	; (8001210 <HAL_ADC_ConfigChannel+0x238>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d123      	bne.n	80011f6 <HAL_ADC_ConfigChannel+0x21e>
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b10      	cmp	r3, #16
 80011b4:	d003      	beq.n	80011be <HAL_ADC_ConfigChannel+0x1e6>
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b11      	cmp	r3, #17
 80011bc:	d11b      	bne.n	80011f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b10      	cmp	r3, #16
 80011d0:	d111      	bne.n	80011f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <HAL_ADC_ConfigChannel+0x23c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a10      	ldr	r2, [pc, #64]	; (8001218 <HAL_ADC_ConfigChannel+0x240>)
 80011d8:	fba2 2303 	umull	r2, r3, r2, r3
 80011dc:	0c9a      	lsrs	r2, r3, #18
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011e8:	e002      	b.n	80011f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	3b01      	subs	r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f9      	bne.n	80011ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	40012300 	.word	0x40012300
 8001210:	40012000 	.word	0x40012000
 8001214:	20000000 	.word	0x20000000
 8001218:	431bde83 	.word	0x431bde83

0800121c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001224:	4b79      	ldr	r3, [pc, #484]	; (800140c <ADC_Init+0x1f0>)
 8001226:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	431a      	orrs	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001250:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6859      	ldr	r1, [r3, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	021a      	lsls	r2, r3, #8
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	430a      	orrs	r2, r1
 8001264:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001274:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6859      	ldr	r1, [r3, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	430a      	orrs	r2, r1
 8001286:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001296:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6899      	ldr	r1, [r3, #8]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68da      	ldr	r2, [r3, #12]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	430a      	orrs	r2, r1
 80012a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ae:	4a58      	ldr	r2, [pc, #352]	; (8001410 <ADC_Init+0x1f4>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d022      	beq.n	80012fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6899      	ldr	r1, [r3, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6899      	ldr	r1, [r3, #8]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	430a      	orrs	r2, r1
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	e00f      	b.n	800131a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001308:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001318:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 0202 	bic.w	r2, r2, #2
 8001328:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6899      	ldr	r1, [r3, #8]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	7e1b      	ldrb	r3, [r3, #24]
 8001334:	005a      	lsls	r2, r3, #1
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d01b      	beq.n	8001380 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001356:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001366:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6859      	ldr	r1, [r3, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	3b01      	subs	r3, #1
 8001374:	035a      	lsls	r2, r3, #13
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	e007      	b.n	8001390 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800138e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800139e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	051a      	lsls	r2, r3, #20
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6899      	ldr	r1, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013d2:	025a      	lsls	r2, r3, #9
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6899      	ldr	r1, [r3, #8]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	029a      	lsls	r2, r3, #10
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	609a      	str	r2, [r3, #8]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	40012300 	.word	0x40012300
 8001410:	0f000001 	.word	0x0f000001

08001414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001430:	4013      	ands	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800143c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	60d3      	str	r3, [r2, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <__NVIC_GetPriorityGrouping+0x18>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	f003 0307 	and.w	r3, r3, #7
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	2b00      	cmp	r3, #0
 8001488:	db0b      	blt.n	80014a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	f003 021f 	and.w	r2, r3, #31
 8001490:	4907      	ldr	r1, [pc, #28]	; (80014b0 <__NVIC_EnableIRQ+0x38>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	095b      	lsrs	r3, r3, #5
 8001498:	2001      	movs	r0, #1
 800149a:	fa00 f202 	lsl.w	r2, r0, r2
 800149e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000e100 	.word	0xe000e100

080014b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	db0a      	blt.n	80014de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	490c      	ldr	r1, [pc, #48]	; (8001500 <__NVIC_SetPriority+0x4c>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	0112      	lsls	r2, r2, #4
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	440b      	add	r3, r1
 80014d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014dc:	e00a      	b.n	80014f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4908      	ldr	r1, [pc, #32]	; (8001504 <__NVIC_SetPriority+0x50>)
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	3b04      	subs	r3, #4
 80014ec:	0112      	lsls	r2, r2, #4
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	440b      	add	r3, r1
 80014f2:	761a      	strb	r2, [r3, #24]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000e100 	.word	0xe000e100
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	; 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f1c3 0307 	rsb	r3, r3, #7
 8001522:	2b04      	cmp	r3, #4
 8001524:	bf28      	it	cs
 8001526:	2304      	movcs	r3, #4
 8001528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3304      	adds	r3, #4
 800152e:	2b06      	cmp	r3, #6
 8001530:	d902      	bls.n	8001538 <NVIC_EncodePriority+0x30>
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3b03      	subs	r3, #3
 8001536:	e000      	b.n	800153a <NVIC_EncodePriority+0x32>
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43da      	mvns	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	401a      	ands	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001550:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	43d9      	mvns	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	4313      	orrs	r3, r2
         );
}
 8001562:	4618      	mov	r0, r3
 8001564:	3724      	adds	r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001580:	d301      	bcc.n	8001586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001582:	2301      	movs	r3, #1
 8001584:	e00f      	b.n	80015a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <SysTick_Config+0x40>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158e:	210f      	movs	r1, #15
 8001590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001594:	f7ff ff8e 	bl	80014b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <SysTick_Config+0x40>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <SysTick_Config+0x40>)
 80015a0:	2207      	movs	r2, #7
 80015a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	e000e010 	.word	0xe000e010

080015b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ff29 	bl	8001414 <__NVIC_SetPriorityGrouping>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015dc:	f7ff ff3e 	bl	800145c <__NVIC_GetPriorityGrouping>
 80015e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	6978      	ldr	r0, [r7, #20]
 80015e8:	f7ff ff8e 	bl	8001508 <NVIC_EncodePriority>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff5d 	bl	80014b4 <__NVIC_SetPriority>
}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff31 	bl	8001478 <__NVIC_EnableIRQ>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ffa2 	bl	8001570 <SysTick_Config>
 800162c:	4603      	mov	r3, r0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d004      	beq.n	8001654 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2280      	movs	r2, #128	; 0x80
 800164e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e00c      	b.n	800166e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2205      	movs	r2, #5
 8001658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0201 	bic.w	r2, r2, #1
 800166a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001688:	b2db      	uxtb	r3, r3
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	; 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
 80016b2:	e159      	b.n	8001968 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016b4:	2201      	movs	r2, #1
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	f040 8148 	bne.w	8001962 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d005      	beq.n	80016ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d130      	bne.n	800174c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	2203      	movs	r2, #3
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001720:	2201      	movs	r2, #1
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	f003 0201 	and.w	r2, r3, #1
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	2b03      	cmp	r3, #3
 8001756:	d017      	beq.n	8001788 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	2203      	movs	r2, #3
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d123      	bne.n	80017dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	08da      	lsrs	r2, r3, #3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3208      	adds	r2, #8
 800179c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	220f      	movs	r2, #15
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	691a      	ldr	r2, [r3, #16]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	08da      	lsrs	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3208      	adds	r2, #8
 80017d6:	69b9      	ldr	r1, [r7, #24]
 80017d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0203 	and.w	r2, r3, #3
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 80a2 	beq.w	8001962 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	4b57      	ldr	r3, [pc, #348]	; (8001980 <HAL_GPIO_Init+0x2e8>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	4a56      	ldr	r2, [pc, #344]	; (8001980 <HAL_GPIO_Init+0x2e8>)
 8001828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800182c:	6453      	str	r3, [r2, #68]	; 0x44
 800182e:	4b54      	ldr	r3, [pc, #336]	; (8001980 <HAL_GPIO_Init+0x2e8>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800183a:	4a52      	ldr	r2, [pc, #328]	; (8001984 <HAL_GPIO_Init+0x2ec>)
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	089b      	lsrs	r3, r3, #2
 8001840:	3302      	adds	r3, #2
 8001842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001846:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	220f      	movs	r2, #15
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a49      	ldr	r2, [pc, #292]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d019      	beq.n	800189a <HAL_GPIO_Init+0x202>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a48      	ldr	r2, [pc, #288]	; (800198c <HAL_GPIO_Init+0x2f4>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d013      	beq.n	8001896 <HAL_GPIO_Init+0x1fe>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a47      	ldr	r2, [pc, #284]	; (8001990 <HAL_GPIO_Init+0x2f8>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d00d      	beq.n	8001892 <HAL_GPIO_Init+0x1fa>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a46      	ldr	r2, [pc, #280]	; (8001994 <HAL_GPIO_Init+0x2fc>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d007      	beq.n	800188e <HAL_GPIO_Init+0x1f6>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a45      	ldr	r2, [pc, #276]	; (8001998 <HAL_GPIO_Init+0x300>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d101      	bne.n	800188a <HAL_GPIO_Init+0x1f2>
 8001886:	2304      	movs	r3, #4
 8001888:	e008      	b.n	800189c <HAL_GPIO_Init+0x204>
 800188a:	2307      	movs	r3, #7
 800188c:	e006      	b.n	800189c <HAL_GPIO_Init+0x204>
 800188e:	2303      	movs	r3, #3
 8001890:	e004      	b.n	800189c <HAL_GPIO_Init+0x204>
 8001892:	2302      	movs	r3, #2
 8001894:	e002      	b.n	800189c <HAL_GPIO_Init+0x204>
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <HAL_GPIO_Init+0x204>
 800189a:	2300      	movs	r3, #0
 800189c:	69fa      	ldr	r2, [r7, #28]
 800189e:	f002 0203 	and.w	r2, r2, #3
 80018a2:	0092      	lsls	r2, r2, #2
 80018a4:	4093      	lsls	r3, r2
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018ac:	4935      	ldr	r1, [pc, #212]	; (8001984 <HAL_GPIO_Init+0x2ec>)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	3302      	adds	r3, #2
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ba:	4b38      	ldr	r3, [pc, #224]	; (800199c <HAL_GPIO_Init+0x304>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4013      	ands	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018de:	4a2f      	ldr	r2, [pc, #188]	; (800199c <HAL_GPIO_Init+0x304>)
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018e4:	4b2d      	ldr	r3, [pc, #180]	; (800199c <HAL_GPIO_Init+0x304>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001908:	4a24      	ldr	r2, [pc, #144]	; (800199c <HAL_GPIO_Init+0x304>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800190e:	4b23      	ldr	r3, [pc, #140]	; (800199c <HAL_GPIO_Init+0x304>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	43db      	mvns	r3, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001932:	4a1a      	ldr	r2, [pc, #104]	; (800199c <HAL_GPIO_Init+0x304>)
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001938:	4b18      	ldr	r3, [pc, #96]	; (800199c <HAL_GPIO_Init+0x304>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800195c:	4a0f      	ldr	r2, [pc, #60]	; (800199c <HAL_GPIO_Init+0x304>)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3301      	adds	r3, #1
 8001966:	61fb      	str	r3, [r7, #28]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	2b0f      	cmp	r3, #15
 800196c:	f67f aea2 	bls.w	80016b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	3724      	adds	r7, #36	; 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800
 8001984:	40013800 	.word	0x40013800
 8001988:	40020000 	.word	0x40020000
 800198c:	40020400 	.word	0x40020400
 8001990:	40020800 	.word	0x40020800
 8001994:	40020c00 	.word	0x40020c00
 8001998:	40021000 	.word	0x40021000
 800199c:	40013c00 	.word	0x40013c00

080019a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	887b      	ldrh	r3, [r7, #2]
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d002      	beq.n	80019be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019b8:	2301      	movs	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
 80019bc:	e001      	b.n	80019c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	807b      	strh	r3, [r7, #2]
 80019dc:	4613      	mov	r3, r2
 80019de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019e0:	787b      	ldrb	r3, [r7, #1]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019e6:	887a      	ldrh	r2, [r7, #2]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019ec:	e003      	b.n	80019f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019ee:	887b      	ldrh	r3, [r7, #2]
 80019f0:	041a      	lsls	r2, r3, #16
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	619a      	str	r2, [r3, #24]
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e12b      	b.n	8001c6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d106      	bne.n	8001a30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7fe ffcc 	bl	80009c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2224      	movs	r2, #36	; 0x24
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0201 	bic.w	r2, r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a68:	f002 faf8 	bl	800405c <HAL_RCC_GetPCLK1Freq>
 8001a6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4a81      	ldr	r2, [pc, #516]	; (8001c78 <HAL_I2C_Init+0x274>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d807      	bhi.n	8001a88 <HAL_I2C_Init+0x84>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4a80      	ldr	r2, [pc, #512]	; (8001c7c <HAL_I2C_Init+0x278>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	bf94      	ite	ls
 8001a80:	2301      	movls	r3, #1
 8001a82:	2300      	movhi	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	e006      	b.n	8001a96 <HAL_I2C_Init+0x92>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4a7d      	ldr	r2, [pc, #500]	; (8001c80 <HAL_I2C_Init+0x27c>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	bf94      	ite	ls
 8001a90:	2301      	movls	r3, #1
 8001a92:	2300      	movhi	r3, #0
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e0e7      	b.n	8001c6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4a78      	ldr	r2, [pc, #480]	; (8001c84 <HAL_I2C_Init+0x280>)
 8001aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa6:	0c9b      	lsrs	r3, r3, #18
 8001aa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	4a6a      	ldr	r2, [pc, #424]	; (8001c78 <HAL_I2C_Init+0x274>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d802      	bhi.n	8001ad8 <HAL_I2C_Init+0xd4>
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	e009      	b.n	8001aec <HAL_I2C_Init+0xe8>
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	4a69      	ldr	r2, [pc, #420]	; (8001c88 <HAL_I2C_Init+0x284>)
 8001ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae8:	099b      	lsrs	r3, r3, #6
 8001aea:	3301      	adds	r3, #1
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	430b      	orrs	r3, r1
 8001af2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001afe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	495c      	ldr	r1, [pc, #368]	; (8001c78 <HAL_I2C_Init+0x274>)
 8001b08:	428b      	cmp	r3, r1
 8001b0a:	d819      	bhi.n	8001b40 <HAL_I2C_Init+0x13c>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1e59      	subs	r1, r3, #1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b1a:	1c59      	adds	r1, r3, #1
 8001b1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b20:	400b      	ands	r3, r1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00a      	beq.n	8001b3c <HAL_I2C_Init+0x138>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1e59      	subs	r1, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b34:	3301      	adds	r3, #1
 8001b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b3a:	e051      	b.n	8001be0 <HAL_I2C_Init+0x1dc>
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	e04f      	b.n	8001be0 <HAL_I2C_Init+0x1dc>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d111      	bne.n	8001b6c <HAL_I2C_Init+0x168>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1e58      	subs	r0, r3, #1
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6859      	ldr	r1, [r3, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	440b      	add	r3, r1
 8001b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	bf0c      	ite	eq
 8001b64:	2301      	moveq	r3, #1
 8001b66:	2300      	movne	r3, #0
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	e012      	b.n	8001b92 <HAL_I2C_Init+0x18e>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6859      	ldr	r1, [r3, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	0099      	lsls	r1, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b82:	3301      	adds	r3, #1
 8001b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	bf0c      	ite	eq
 8001b8c:	2301      	moveq	r3, #1
 8001b8e:	2300      	movne	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_I2C_Init+0x196>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e022      	b.n	8001be0 <HAL_I2C_Init+0x1dc>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10e      	bne.n	8001bc0 <HAL_I2C_Init+0x1bc>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1e58      	subs	r0, r3, #1
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6859      	ldr	r1, [r3, #4]
 8001baa:	460b      	mov	r3, r1
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	440b      	add	r3, r1
 8001bb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bbe:	e00f      	b.n	8001be0 <HAL_I2C_Init+0x1dc>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	1e58      	subs	r0, r3, #1
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6859      	ldr	r1, [r3, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	0099      	lsls	r1, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	6809      	ldr	r1, [r1, #0]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69da      	ldr	r2, [r3, #28]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6911      	ldr	r1, [r2, #16]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	68d2      	ldr	r2, [r2, #12]
 8001c1a:	4311      	orrs	r1, r2
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	430b      	orrs	r3, r1
 8001c22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695a      	ldr	r2, [r3, #20]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	000186a0 	.word	0x000186a0
 8001c7c:	001e847f 	.word	0x001e847f
 8001c80:	003d08ff 	.word	0x003d08ff
 8001c84:	431bde83 	.word	0x431bde83
 8001c88:	10624dd3 	.word	0x10624dd3

08001c8c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b087      	sub	sp, #28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001ca8:	2b28      	cmp	r3, #40	; 0x28
 8001caa:	d15b      	bne.n	8001d64 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8001cb2:	88fb      	ldrh	r3, [r7, #6]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e054      	b.n	8001d66 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e04d      	b.n	8001d66 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d007      	beq.n	8001cf0 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0201 	orr.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2229      	movs	r2, #41	; 0x29
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	88fa      	ldrh	r2, [r7, #6]
 8001d20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001d5e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	e000      	b.n	8001d66 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8001d64:	2302      	movs	r3, #2
  }
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	371c      	adds	r7, #28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b087      	sub	sp, #28
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	60f8      	str	r0, [r7, #12]
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	603b      	str	r3, [r7, #0]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001d8e:	2b28      	cmp	r3, #40	; 0x28
 8001d90:	d15b      	bne.n	8001e4a <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e054      	b.n	8001e4c <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e04d      	b.n	8001e4c <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d007      	beq.n	8001dd6 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f042 0201 	orr.w	r2, r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001de4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	222a      	movs	r2, #42	; 0x2a
 8001dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2220      	movs	r2, #32
 8001df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	88fa      	ldrh	r2, [r7, #6]
 8001e06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001e44:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001e46:	2300      	movs	r3, #0
 8001e48:	e000      	b.n	8001e4c <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8001e4a:	2302      	movs	r3, #2
  }
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	371c      	adds	r7, #28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b20      	cmp	r3, #32
 8001e6a:	d124      	bne.n	8001eb6 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2228      	movs	r2, #40	; 0x28
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d007      	beq.n	8001e92 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f042 0201 	orr.w	r2, r2, #1
 8001e90:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ea0:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001eb0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e000      	b.n	8001eb8 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001eb6:	2302      	movs	r3, #2
  }
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ee4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eec:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	2b10      	cmp	r3, #16
 8001ef2:	d003      	beq.n	8001efc <HAL_I2C_EV_IRQHandler+0x38>
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	2b40      	cmp	r3, #64	; 0x40
 8001ef8:	f040 80c1 	bne.w	800207e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10d      	bne.n	8001f32 <HAL_I2C_EV_IRQHandler+0x6e>
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001f1c:	d003      	beq.n	8001f26 <HAL_I2C_EV_IRQHandler+0x62>
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001f24:	d101      	bne.n	8001f2a <HAL_I2C_EV_IRQHandler+0x66>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <HAL_I2C_EV_IRQHandler+0x68>
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	f000 8132 	beq.w	8002196 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00c      	beq.n	8001f56 <HAL_I2C_EV_IRQHandler+0x92>
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	0a5b      	lsrs	r3, r3, #9
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d006      	beq.n	8001f56 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f001 fc3b 	bl	80037c4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 fd43 	bl	80029da <I2C_Master_SB>
 8001f54:	e092      	b.n	800207c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	08db      	lsrs	r3, r3, #3
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d009      	beq.n	8001f76 <HAL_I2C_EV_IRQHandler+0xb2>
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	0a5b      	lsrs	r3, r3, #9
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 fdb9 	bl	8002ae6 <I2C_Master_ADD10>
 8001f74:	e082      	b.n	800207c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	085b      	lsrs	r3, r3, #1
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d009      	beq.n	8001f96 <HAL_I2C_EV_IRQHandler+0xd2>
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	0a5b      	lsrs	r3, r3, #9
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fdd3 	bl	8002b3a <I2C_Master_ADDR>
 8001f94:	e072      	b.n	800207c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	089b      	lsrs	r3, r3, #2
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d03b      	beq.n	800201a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fb0:	f000 80f3 	beq.w	800219a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	09db      	lsrs	r3, r3, #7
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00f      	beq.n	8001fe0 <HAL_I2C_EV_IRQHandler+0x11c>
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	0a9b      	lsrs	r3, r3, #10
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d009      	beq.n	8001fe0 <HAL_I2C_EV_IRQHandler+0x11c>
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	089b      	lsrs	r3, r3, #2
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d103      	bne.n	8001fe0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f9b3 	bl	8002344 <I2C_MasterTransmit_TXE>
 8001fde:	e04d      	b.n	800207c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 80d6 	beq.w	800219a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	0a5b      	lsrs	r3, r3, #9
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 80cf 	beq.w	800219a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001ffc:	7bbb      	ldrb	r3, [r7, #14]
 8001ffe:	2b21      	cmp	r3, #33	; 0x21
 8002000:	d103      	bne.n	800200a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 fa3a 	bl	800247c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002008:	e0c7      	b.n	800219a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800200a:	7bfb      	ldrb	r3, [r7, #15]
 800200c:	2b40      	cmp	r3, #64	; 0x40
 800200e:	f040 80c4 	bne.w	800219a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 faa8 	bl	8002568 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002018:	e0bf      	b.n	800219a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002024:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002028:	f000 80b7 	beq.w	800219a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	099b      	lsrs	r3, r3, #6
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00f      	beq.n	8002058 <HAL_I2C_EV_IRQHandler+0x194>
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	0a9b      	lsrs	r3, r3, #10
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d009      	beq.n	8002058 <HAL_I2C_EV_IRQHandler+0x194>
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b00      	cmp	r3, #0
 800204e:	d103      	bne.n	8002058 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 fb1d 	bl	8002690 <I2C_MasterReceive_RXNE>
 8002056:	e011      	b.n	800207c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	089b      	lsrs	r3, r3, #2
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 809a 	beq.w	800219a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	0a5b      	lsrs	r3, r3, #9
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 8093 	beq.w	800219a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 fbc6 	bl	8002806 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800207a:	e08e      	b.n	800219a <HAL_I2C_EV_IRQHandler+0x2d6>
 800207c:	e08d      	b.n	800219a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d004      	beq.n	8002090 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	e007      	b.n	80020a0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d012      	beq.n	80020d2 <HAL_I2C_EV_IRQHandler+0x20e>
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	0a5b      	lsrs	r3, r3, #9
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00c      	beq.n	80020d2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80020c8:	69b9      	ldr	r1, [r7, #24]
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 ff84 	bl	8002fd8 <I2C_Slave_ADDR>
 80020d0:	e066      	b.n	80021a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <HAL_I2C_EV_IRQHandler+0x22e>
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	0a5b      	lsrs	r3, r3, #9
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 ffbe 	bl	800306c <I2C_Slave_STOPF>
 80020f0:	e056      	b.n	80021a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80020f2:	7bbb      	ldrb	r3, [r7, #14]
 80020f4:	2b21      	cmp	r3, #33	; 0x21
 80020f6:	d002      	beq.n	80020fe <HAL_I2C_EV_IRQHandler+0x23a>
 80020f8:	7bbb      	ldrb	r3, [r7, #14]
 80020fa:	2b29      	cmp	r3, #41	; 0x29
 80020fc:	d125      	bne.n	800214a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	09db      	lsrs	r3, r3, #7
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00f      	beq.n	800212a <HAL_I2C_EV_IRQHandler+0x266>
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	0a9b      	lsrs	r3, r3, #10
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d009      	beq.n	800212a <HAL_I2C_EV_IRQHandler+0x266>
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	089b      	lsrs	r3, r3, #2
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d103      	bne.n	800212a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 fe9a 	bl	8002e5c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002128:	e039      	b.n	800219e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	089b      	lsrs	r3, r3, #2
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d033      	beq.n	800219e <HAL_I2C_EV_IRQHandler+0x2da>
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	0a5b      	lsrs	r3, r3, #9
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d02d      	beq.n	800219e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 fec7 	bl	8002ed6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002148:	e029      	b.n	800219e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	099b      	lsrs	r3, r3, #6
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00f      	beq.n	8002176 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	0a9b      	lsrs	r3, r3, #10
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d009      	beq.n	8002176 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	089b      	lsrs	r3, r3, #2
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d103      	bne.n	8002176 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 fed2 	bl	8002f18 <I2C_SlaveReceive_RXNE>
 8002174:	e014      	b.n	80021a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00e      	beq.n	80021a0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	0a5b      	lsrs	r3, r3, #9
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d008      	beq.n	80021a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 ff00 	bl	8002f94 <I2C_SlaveReceive_BTF>
 8002194:	e004      	b.n	80021a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002196:	bf00      	nop
 8002198:	e002      	b.n	80021a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800219a:	bf00      	nop
 800219c:	e000      	b.n	80021a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800219e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80021a0:	3720      	adds	r7, #32
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b08a      	sub	sp, #40	; 0x28
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80021be:	2300      	movs	r3, #0
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021c8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00e      	beq.n	80021f4 <HAL_I2C_ER_IRQHandler+0x4e>
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	0a1b      	lsrs	r3, r3, #8
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d008      	beq.n	80021f4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80021f2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021f4:	6a3b      	ldr	r3, [r7, #32]
 80021f6:	0a5b      	lsrs	r3, r3, #9
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00e      	beq.n	800221e <HAL_I2C_ER_IRQHandler+0x78>
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	0a1b      	lsrs	r3, r3, #8
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d008      	beq.n	800221e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	f043 0302 	orr.w	r3, r3, #2
 8002212:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800221c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	0a9b      	lsrs	r3, r3, #10
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d03f      	beq.n	80022aa <HAL_I2C_ER_IRQHandler+0x104>
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	0a1b      	lsrs	r3, r3, #8
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d039      	beq.n	80022aa <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002236:	7efb      	ldrb	r3, [r7, #27]
 8002238:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223e:	b29b      	uxth	r3, r3
 8002240:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002248:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002250:	7ebb      	ldrb	r3, [r7, #26]
 8002252:	2b20      	cmp	r3, #32
 8002254:	d112      	bne.n	800227c <HAL_I2C_ER_IRQHandler+0xd6>
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10f      	bne.n	800227c <HAL_I2C_ER_IRQHandler+0xd6>
 800225c:	7cfb      	ldrb	r3, [r7, #19]
 800225e:	2b21      	cmp	r3, #33	; 0x21
 8002260:	d008      	beq.n	8002274 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002262:	7cfb      	ldrb	r3, [r7, #19]
 8002264:	2b29      	cmp	r3, #41	; 0x29
 8002266:	d005      	beq.n	8002274 <HAL_I2C_ER_IRQHandler+0xce>
 8002268:	7cfb      	ldrb	r3, [r7, #19]
 800226a:	2b28      	cmp	r3, #40	; 0x28
 800226c:	d106      	bne.n	800227c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b21      	cmp	r3, #33	; 0x21
 8002272:	d103      	bne.n	800227c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f001 f829 	bl	80032cc <I2C_Slave_AF>
 800227a:	e016      	b.n	80022aa <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002284:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	f043 0304 	orr.w	r3, r3, #4
 800228c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800228e:	7efb      	ldrb	r3, [r7, #27]
 8002290:	2b10      	cmp	r3, #16
 8002292:	d002      	beq.n	800229a <HAL_I2C_ER_IRQHandler+0xf4>
 8002294:	7efb      	ldrb	r3, [r7, #27]
 8002296:	2b40      	cmp	r3, #64	; 0x40
 8002298:	d107      	bne.n	80022aa <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	0adb      	lsrs	r3, r3, #11
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00e      	beq.n	80022d4 <HAL_I2C_ER_IRQHandler+0x12e>
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	0a1b      	lsrs	r3, r3, #8
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d008      	beq.n	80022d4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	f043 0308 	orr.w	r3, r3, #8
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80022d2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d008      	beq.n	80022ec <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f001 f860 	bl	80033ac <I2C_ITError>
  }
}
 80022ec:	bf00      	nop
 80022ee:	3728      	adds	r7, #40	; 0x28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002352:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800235a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002366:	2b00      	cmp	r3, #0
 8002368:	d150      	bne.n	800240c <I2C_MasterTransmit_TXE+0xc8>
 800236a:	7bfb      	ldrb	r3, [r7, #15]
 800236c:	2b21      	cmp	r3, #33	; 0x21
 800236e:	d14d      	bne.n	800240c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b08      	cmp	r3, #8
 8002374:	d01d      	beq.n	80023b2 <I2C_MasterTransmit_TXE+0x6e>
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b20      	cmp	r3, #32
 800237a:	d01a      	beq.n	80023b2 <I2C_MasterTransmit_TXE+0x6e>
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002382:	d016      	beq.n	80023b2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002392:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2211      	movs	r2, #17
 8002398:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff ffa2 	bl	80022f4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023b0:	e060      	b.n	8002474 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023c0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b40      	cmp	r3, #64	; 0x40
 80023ea:	d107      	bne.n	80023fc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ff91 	bl	800231c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023fa:	e03b      	b.n	8002474 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff ff75 	bl	80022f4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800240a:	e033      	b.n	8002474 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	2b21      	cmp	r3, #33	; 0x21
 8002410:	d005      	beq.n	800241e <I2C_MasterTransmit_TXE+0xda>
 8002412:	7bbb      	ldrb	r3, [r7, #14]
 8002414:	2b40      	cmp	r3, #64	; 0x40
 8002416:	d12d      	bne.n	8002474 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	2b22      	cmp	r3, #34	; 0x22
 800241c:	d12a      	bne.n	8002474 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002422:	b29b      	uxth	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d108      	bne.n	800243a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002436:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002438:	e01c      	b.n	8002474 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b40      	cmp	r3, #64	; 0x40
 8002444:	d103      	bne.n	800244e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f88e 	bl	8002568 <I2C_MemoryTransmit_TXE_BTF>
}
 800244c:	e012      	b.n	8002474 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	781a      	ldrb	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002468:	b29b      	uxth	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002472:	e7ff      	b.n	8002474 <I2C_MasterTransmit_TXE+0x130>
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b21      	cmp	r3, #33	; 0x21
 8002494:	d164      	bne.n	8002560 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249a:	b29b      	uxth	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d012      	beq.n	80024c6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	781a      	ldrb	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80024c4:	e04c      	b.n	8002560 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d01d      	beq.n	8002508 <I2C_MasterTransmit_BTF+0x8c>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2b20      	cmp	r3, #32
 80024d0:	d01a      	beq.n	8002508 <I2C_MasterTransmit_BTF+0x8c>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024d8:	d016      	beq.n	8002508 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024e8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2211      	movs	r2, #17
 80024ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff fef7 	bl	80022f4 <HAL_I2C_MasterTxCpltCallback>
}
 8002506:	e02b      	b.n	8002560 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002516:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002526:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2220      	movs	r2, #32
 8002532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b40      	cmp	r3, #64	; 0x40
 8002540:	d107      	bne.n	8002552 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff fee6 	bl	800231c <HAL_I2C_MemTxCpltCallback>
}
 8002550:	e006      	b.n	8002560 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff feca 	bl	80022f4 <HAL_I2C_MasterTxCpltCallback>
}
 8002560:	bf00      	nop
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002576:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800257c:	2b00      	cmp	r3, #0
 800257e:	d11d      	bne.n	80025bc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002584:	2b01      	cmp	r3, #1
 8002586:	d10b      	bne.n	80025a0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800258c:	b2da      	uxtb	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002598:	1c9a      	adds	r2, r3, #2
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800259e:	e073      	b.n	8002688 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	121b      	asrs	r3, r3, #8
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80025ba:	e065      	b.n	8002688 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d10b      	bne.n	80025dc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80025da:	e055      	b.n	8002688 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d151      	bne.n	8002688 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	2b22      	cmp	r3, #34	; 0x22
 80025e8:	d10d      	bne.n	8002606 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025f8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002604:	e040      	b.n	8002688 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d015      	beq.n	800263c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	2b21      	cmp	r3, #33	; 0x21
 8002614:	d112      	bne.n	800263c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	781a      	ldrb	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002630:	b29b      	uxth	r3, r3
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800263a:	e025      	b.n	8002688 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002640:	b29b      	uxth	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d120      	bne.n	8002688 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	2b21      	cmp	r3, #33	; 0x21
 800264a:	d11d      	bne.n	8002688 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800265a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800266a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2220      	movs	r2, #32
 8002676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff fe4a 	bl	800231c <HAL_I2C_MemTxCpltCallback>
}
 8002688:	bf00      	nop
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b22      	cmp	r3, #34	; 0x22
 80026a2:	f040 80ac 	bne.w	80027fe <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d921      	bls.n	80026f8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691a      	ldr	r2, [r3, #16]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	f040 808c 	bne.w	80027fe <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026f4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80026f6:	e082      	b.n	80027fe <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d075      	beq.n	80027ec <I2C_MasterReceive_RXNE+0x15c>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d002      	beq.n	800270c <I2C_MasterReceive_RXNE+0x7c>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d16f      	bne.n	80027ec <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f001 f827 	bl	8003760 <I2C_WaitOnSTOPRequestThroughIT>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d142      	bne.n	800279e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002726:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002736:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	1c5a      	adds	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002754:	b29b      	uxth	r3, r3
 8002756:	3b01      	subs	r3, #1
 8002758:	b29a      	uxth	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2220      	movs	r2, #32
 8002762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b40      	cmp	r3, #64	; 0x40
 8002770:	d10a      	bne.n	8002788 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff fdd5 	bl	8002330 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002786:	e03a      	b.n	80027fe <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2212      	movs	r2, #18
 8002794:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff fdb6 	bl	8002308 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800279c:	e02f      	b.n	80027fe <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027ac:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f001 fcab 	bl	8004140 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80027ea:	e008      	b.n	80027fe <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027fa:	605a      	str	r2, [r3, #4]
}
 80027fc:	e7ff      	b.n	80027fe <I2C_MasterReceive_RXNE+0x16e>
 80027fe:	bf00      	nop
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002812:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b04      	cmp	r3, #4
 800281c:	d11b      	bne.n	8002856 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800282c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284a:	b29b      	uxth	r3, r3
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002854:	e0bd      	b.n	80029d2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285a:	b29b      	uxth	r3, r3
 800285c:	2b03      	cmp	r3, #3
 800285e:	d129      	bne.n	80028b4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800286e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b04      	cmp	r3, #4
 8002874:	d00a      	beq.n	800288c <I2C_MasterReceive_BTF+0x86>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b02      	cmp	r3, #2
 800287a:	d007      	beq.n	800288c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800288a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691a      	ldr	r2, [r3, #16]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80028b2:	e08e      	b.n	80029d2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d176      	bne.n	80029ac <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d002      	beq.n	80028ca <I2C_MasterReceive_BTF+0xc4>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2b10      	cmp	r3, #16
 80028c8:	d108      	bne.n	80028dc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	e019      	b.n	8002910 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d002      	beq.n	80028e8 <I2C_MasterReceive_BTF+0xe2>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d108      	bne.n	80028fa <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	e00a      	b.n	8002910 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2b10      	cmp	r3, #16
 80028fe:	d007      	beq.n	8002910 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691a      	ldr	r2, [r3, #16]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800296a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2220      	movs	r2, #32
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b40      	cmp	r3, #64	; 0x40
 800297e:	d10a      	bne.n	8002996 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff fcce 	bl	8002330 <HAL_I2C_MemRxCpltCallback>
}
 8002994:	e01d      	b.n	80029d2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2212      	movs	r2, #18
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff fcaf 	bl	8002308 <HAL_I2C_MasterRxCpltCallback>
}
 80029aa:	e012      	b.n	80029d2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691a      	ldr	r2, [r3, #16]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	3b01      	subs	r3, #1
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80029d2:	bf00      	nop
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b40      	cmp	r3, #64	; 0x40
 80029ec:	d117      	bne.n	8002a1e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d109      	bne.n	8002a0a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a06:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002a08:	e067      	b.n	8002ada <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	611a      	str	r2, [r3, #16]
}
 8002a1c:	e05d      	b.n	8002ada <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a26:	d133      	bne.n	8002a90 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b21      	cmp	r3, #33	; 0x21
 8002a32:	d109      	bne.n	8002a48 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a44:	611a      	str	r2, [r3, #16]
 8002a46:	e008      	b.n	8002a5a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d004      	beq.n	8002a6c <I2C_Master_SB+0x92>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d108      	bne.n	8002a7e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d032      	beq.n	8002ada <I2C_Master_SB+0x100>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d02d      	beq.n	8002ada <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a8c:	605a      	str	r2, [r3, #4]
}
 8002a8e:	e024      	b.n	8002ada <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10e      	bne.n	8002ab6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	11db      	asrs	r3, r3, #7
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	f003 0306 	and.w	r3, r3, #6
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	f063 030f 	orn	r3, r3, #15
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	611a      	str	r2, [r3, #16]
}
 8002ab4:	e011      	b.n	8002ada <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d10d      	bne.n	8002ada <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	11db      	asrs	r3, r3, #7
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	f003 0306 	and.w	r3, r3, #6
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	f063 030e 	orn	r3, r3, #14
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	611a      	str	r2, [r3, #16]
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d004      	beq.n	8002b0c <I2C_Master_ADD10+0x26>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d108      	bne.n	8002b1e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00c      	beq.n	8002b2e <I2C_Master_ADD10+0x48>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d007      	beq.n	8002b2e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b2c:	605a      	str	r2, [r3, #4]
  }
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b091      	sub	sp, #68	; 0x44
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b50:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b22      	cmp	r3, #34	; 0x22
 8002b62:	f040 8169 	bne.w	8002e38 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10f      	bne.n	8002b8e <I2C_Master_ADDR+0x54>
 8002b6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b72:	2b40      	cmp	r3, #64	; 0x40
 8002b74:	d10b      	bne.n	8002b8e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b76:	2300      	movs	r3, #0
 8002b78:	633b      	str	r3, [r7, #48]	; 0x30
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	633b      	str	r3, [r7, #48]	; 0x30
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	633b      	str	r3, [r7, #48]	; 0x30
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8c:	e160      	b.n	8002e50 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d11d      	bne.n	8002bd2 <I2C_Master_ADDR+0x98>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002b9e:	d118      	bne.n	8002bd2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bc4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	651a      	str	r2, [r3, #80]	; 0x50
 8002bd0:	e13e      	b.n	8002e50 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d113      	bne.n	8002c04 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bdc:	2300      	movs	r3, #0
 8002bde:	62bb      	str	r3, [r7, #40]	; 0x28
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	e115      	b.n	8002e30 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	f040 808a 	bne.w	8002d24 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c12:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c16:	d137      	bne.n	8002c88 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c26:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c36:	d113      	bne.n	8002c60 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c46:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c48:	2300      	movs	r3, #0
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	e0e7      	b.n	8002e30 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c60:	2300      	movs	r3, #0
 8002c62:	623b      	str	r3, [r7, #32]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	623b      	str	r3, [r7, #32]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	623b      	str	r3, [r7, #32]
 8002c74:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	e0d3      	b.n	8002e30 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d02e      	beq.n	8002cec <I2C_Master_ADDR+0x1b2>
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c90:	2b20      	cmp	r3, #32
 8002c92:	d02b      	beq.n	8002cec <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c96:	2b12      	cmp	r3, #18
 8002c98:	d102      	bne.n	8002ca0 <I2C_Master_ADDR+0x166>
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d125      	bne.n	8002cec <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d00e      	beq.n	8002cc4 <I2C_Master_ADDR+0x18a>
 8002ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d00b      	beq.n	8002cc4 <I2C_Master_ADDR+0x18a>
 8002cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cae:	2b10      	cmp	r3, #16
 8002cb0:	d008      	beq.n	8002cc4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	e007      	b.n	8002cd4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cd2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	61fb      	str	r3, [r7, #28]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	61fb      	str	r3, [r7, #28]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	61fb      	str	r3, [r7, #28]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	e0a1      	b.n	8002e30 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cfa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61bb      	str	r3, [r7, #24]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	61bb      	str	r3, [r7, #24]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	61bb      	str	r3, [r7, #24]
 8002d10:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	e085      	b.n	8002e30 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d14d      	bne.n	8002dca <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d016      	beq.n	8002d62 <I2C_Master_ADDR+0x228>
 8002d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d013      	beq.n	8002d62 <I2C_Master_ADDR+0x228>
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3c:	2b10      	cmp	r3, #16
 8002d3e:	d010      	beq.n	8002d62 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d4e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	e007      	b.n	8002d72 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d70:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d80:	d117      	bne.n	8002db2 <I2C_Master_ADDR+0x278>
 8002d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d88:	d00b      	beq.n	8002da2 <I2C_Master_ADDR+0x268>
 8002d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d008      	beq.n	8002da2 <I2C_Master_ADDR+0x268>
 8002d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d005      	beq.n	8002da2 <I2C_Master_ADDR+0x268>
 8002d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d98:	2b10      	cmp	r3, #16
 8002d9a:	d002      	beq.n	8002da2 <I2C_Master_ADDR+0x268>
 8002d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d107      	bne.n	8002db2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002db0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	e032      	b.n	8002e30 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dd8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002de8:	d117      	bne.n	8002e1a <I2C_Master_ADDR+0x2e0>
 8002dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002df0:	d00b      	beq.n	8002e0a <I2C_Master_ADDR+0x2d0>
 8002df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d008      	beq.n	8002e0a <I2C_Master_ADDR+0x2d0>
 8002df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfa:	2b08      	cmp	r3, #8
 8002dfc:	d005      	beq.n	8002e0a <I2C_Master_ADDR+0x2d0>
 8002dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e00:	2b10      	cmp	r3, #16
 8002e02:	d002      	beq.n	8002e0a <I2C_Master_ADDR+0x2d0>
 8002e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e06:	2b20      	cmp	r3, #32
 8002e08:	d107      	bne.n	8002e1a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e18:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002e36:	e00b      	b.n	8002e50 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
}
 8002e4e:	e7ff      	b.n	8002e50 <I2C_Master_ADDR+0x316>
 8002e50:	bf00      	nop
 8002e52:	3744      	adds	r7, #68	; 0x44
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d02b      	beq.n	8002ece <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	781a      	ldrb	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	3b01      	subs	r3, #1
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d114      	bne.n	8002ece <I2C_SlaveTransmit_TXE+0x72>
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	2b29      	cmp	r3, #41	; 0x29
 8002ea8:	d111      	bne.n	8002ece <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eb8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2221      	movs	r2, #33	; 0x21
 8002ebe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2228      	movs	r2, #40	; 0x28
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f001 f925 	bl	8004118 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d011      	beq.n	8002f0c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	781a      	ldrb	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f26:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d02c      	beq.n	8002f8c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d114      	bne.n	8002f8c <I2C_SlaveReceive_RXNE+0x74>
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
 8002f64:	2b2a      	cmp	r3, #42	; 0x2a
 8002f66:	d111      	bne.n	8002f8c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f76:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2222      	movs	r2, #34	; 0x22
 8002f7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2228      	movs	r2, #40	; 0x28
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f001 f8b2 	bl	80040f0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d012      	beq.n	8002fcc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ff2:	2b28      	cmp	r3, #40	; 0x28
 8002ff4:	d127      	bne.n	8003046 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003004:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	089b      	lsrs	r3, r3, #2
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003012:	2301      	movs	r3, #1
 8003014:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	09db      	lsrs	r3, r3, #7
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d103      	bne.n	800302a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	81bb      	strh	r3, [r7, #12]
 8003028:	e002      	b.n	8003030 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003038:	89ba      	ldrh	r2, [r7, #12]
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	4619      	mov	r1, r3
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f001 f83c 	bl	80040bc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003044:	e00e      	b.n	8003064 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003046:	2300      	movs	r3, #0
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	60bb      	str	r3, [r7, #8]
 800305a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003064:	bf00      	nop
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800308a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800308c:	2300      	movs	r3, #0
 800308e:	60bb      	str	r3, [r7, #8]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	60bb      	str	r3, [r7, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0201 	orr.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030c8:	d172      	bne.n	80031b0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
 80030cc:	2b22      	cmp	r3, #34	; 0x22
 80030ce:	d002      	beq.n	80030d6 <I2C_Slave_STOPF+0x6a>
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	2b2a      	cmp	r3, #42	; 0x2a
 80030d4:	d135      	bne.n	8003142 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	b29a      	uxth	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d005      	beq.n	80030fa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f043 0204 	orr.w	r2, r3, #4
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003108:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310e:	4618      	mov	r0, r3
 8003110:	f7fe fab3 	bl	800167a <HAL_DMA_GetState>
 8003114:	4603      	mov	r3, r0
 8003116:	2b01      	cmp	r3, #1
 8003118:	d049      	beq.n	80031ae <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311e:	4a69      	ldr	r2, [pc, #420]	; (80032c4 <I2C_Slave_STOPF+0x258>)
 8003120:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe fa85 	bl	8001636 <HAL_DMA_Abort_IT>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d03d      	beq.n	80031ae <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800313c:	4610      	mov	r0, r2
 800313e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003140:	e035      	b.n	80031ae <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	b29a      	uxth	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003154:	b29b      	uxth	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d005      	beq.n	8003166 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f043 0204 	orr.w	r2, r3, #4
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003174:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317a:	4618      	mov	r0, r3
 800317c:	f7fe fa7d 	bl	800167a <HAL_DMA_GetState>
 8003180:	4603      	mov	r3, r0
 8003182:	2b01      	cmp	r3, #1
 8003184:	d014      	beq.n	80031b0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318a:	4a4e      	ldr	r2, [pc, #312]	; (80032c4 <I2C_Slave_STOPF+0x258>)
 800318c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003192:	4618      	mov	r0, r3
 8003194:	f7fe fa4f 	bl	8001636 <HAL_DMA_Abort_IT>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d008      	beq.n	80031b0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031a8:	4610      	mov	r0, r2
 80031aa:	4798      	blx	r3
 80031ac:	e000      	b.n	80031b0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031ae:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d03e      	beq.n	8003238 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d112      	bne.n	80031ee <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691a      	ldr	r2, [r3, #16]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	1c5a      	adds	r2, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f8:	2b40      	cmp	r3, #64	; 0x40
 80031fa:	d112      	bne.n	8003222 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691a      	ldr	r2, [r3, #16]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	3b01      	subs	r3, #1
 800321c:	b29a      	uxth	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003226:	b29b      	uxth	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	f043 0204 	orr.w	r2, r3, #4
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f8b3 	bl	80033ac <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003246:	e039      	b.n	80032bc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	2b2a      	cmp	r3, #42	; 0x2a
 800324c:	d109      	bne.n	8003262 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2228      	movs	r2, #40	; 0x28
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 ff47 	bl	80040f0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b28      	cmp	r3, #40	; 0x28
 800326c:	d111      	bne.n	8003292 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a15      	ldr	r2, [pc, #84]	; (80032c8 <I2C_Slave_STOPF+0x25c>)
 8003272:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 ff02 	bl	8004094 <HAL_I2C_ListenCpltCallback>
}
 8003290:	e014      	b.n	80032bc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	2b22      	cmp	r3, #34	; 0x22
 8003298:	d002      	beq.n	80032a0 <I2C_Slave_STOPF+0x234>
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	2b22      	cmp	r3, #34	; 0x22
 800329e:	d10d      	bne.n	80032bc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 ff1a 	bl	80040f0 <HAL_I2C_SlaveRxCpltCallback>
}
 80032bc:	bf00      	nop
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	08003611 	.word	0x08003611
 80032c8:	ffff0000 	.word	0xffff0000

080032cc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032da:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d002      	beq.n	80032ee <I2C_Slave_AF+0x22>
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b20      	cmp	r3, #32
 80032ec:	d129      	bne.n	8003342 <I2C_Slave_AF+0x76>
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	2b28      	cmp	r3, #40	; 0x28
 80032f2:	d126      	bne.n	8003342 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a2c      	ldr	r2, [pc, #176]	; (80033a8 <I2C_Slave_AF+0xdc>)
 80032f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003308:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003312:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003322:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2220      	movs	r2, #32
 800332e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 feaa 	bl	8004094 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003340:	e02e      	b.n	80033a0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003342:	7bfb      	ldrb	r3, [r7, #15]
 8003344:	2b21      	cmp	r3, #33	; 0x21
 8003346:	d126      	bne.n	8003396 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a17      	ldr	r2, [pc, #92]	; (80033a8 <I2C_Slave_AF+0xdc>)
 800334c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2221      	movs	r2, #33	; 0x21
 8003352:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003372:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800337c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800338c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 fec2 	bl	8004118 <HAL_I2C_SlaveTxCpltCallback>
}
 8003394:	e004      	b.n	80033a0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800339e:	615a      	str	r2, [r3, #20]
}
 80033a0:	bf00      	nop
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	ffff0000 	.word	0xffff0000

080033ac <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033c2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80033c4:	7bbb      	ldrb	r3, [r7, #14]
 80033c6:	2b10      	cmp	r3, #16
 80033c8:	d002      	beq.n	80033d0 <I2C_ITError+0x24>
 80033ca:	7bbb      	ldrb	r3, [r7, #14]
 80033cc:	2b40      	cmp	r3, #64	; 0x40
 80033ce:	d10a      	bne.n	80033e6 <I2C_ITError+0x3a>
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	2b22      	cmp	r3, #34	; 0x22
 80033d4:	d107      	bne.n	80033e6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033e4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033ec:	2b28      	cmp	r3, #40	; 0x28
 80033ee:	d107      	bne.n	8003400 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2228      	movs	r2, #40	; 0x28
 80033fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80033fe:	e015      	b.n	800342c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800340a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800340e:	d00a      	beq.n	8003426 <I2C_ITError+0x7a>
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	2b60      	cmp	r3, #96	; 0x60
 8003414:	d007      	beq.n	8003426 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003436:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800343a:	d162      	bne.n	8003502 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800344a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003450:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d020      	beq.n	800349c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345e:	4a6a      	ldr	r2, [pc, #424]	; (8003608 <I2C_ITError+0x25c>)
 8003460:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003466:	4618      	mov	r0, r3
 8003468:	f7fe f8e5 	bl	8001636 <HAL_DMA_Abort_IT>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 8089 	beq.w	8003586 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0201 	bic.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003496:	4610      	mov	r0, r2
 8003498:	4798      	blx	r3
 800349a:	e074      	b.n	8003586 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a0:	4a59      	ldr	r2, [pc, #356]	; (8003608 <I2C_ITError+0x25c>)
 80034a2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fe f8c4 	bl	8001636 <HAL_DMA_Abort_IT>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d068      	beq.n	8003586 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	2b40      	cmp	r3, #64	; 0x40
 80034c0:	d10b      	bne.n	80034da <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0201 	bic.w	r2, r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034fc:	4610      	mov	r0, r2
 80034fe:	4798      	blx	r3
 8003500:	e041      	b.n	8003586 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b60      	cmp	r3, #96	; 0x60
 800350c:	d125      	bne.n	800355a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	2b40      	cmp	r3, #64	; 0x40
 8003528:	d10b      	bne.n	8003542 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	691a      	ldr	r2, [r3, #16]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fe08 	bl	8004168 <HAL_I2C_AbortCpltCallback>
 8003558:	e015      	b.n	8003586 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003564:	2b40      	cmp	r3, #64	; 0x40
 8003566:	d10b      	bne.n	8003580 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 fddd 	bl	8004140 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10e      	bne.n	80035b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800359c:	2b00      	cmp	r3, #0
 800359e:	d109      	bne.n	80035b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d104      	bne.n	80035b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d007      	beq.n	80035c4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035c2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ca:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d113      	bne.n	8003600 <I2C_ITError+0x254>
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	2b28      	cmp	r3, #40	; 0x28
 80035dc:	d110      	bne.n	8003600 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a0a      	ldr	r2, [pc, #40]	; (800360c <I2C_ITError+0x260>)
 80035e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fd4a 	bl	8004094 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003600:	bf00      	nop
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	08003611 	.word	0x08003611
 800360c:	ffff0000 	.word	0xffff0000

08003610 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003620:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003628:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800362a:	4b4b      	ldr	r3, [pc, #300]	; (8003758 <I2C_DMAAbort+0x148>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	08db      	lsrs	r3, r3, #3
 8003630:	4a4a      	ldr	r2, [pc, #296]	; (800375c <I2C_DMAAbort+0x14c>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	0a1a      	lsrs	r2, r3, #8
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	00da      	lsls	r2, r3, #3
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f043 0220 	orr.w	r2, r3, #32
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003656:	e00a      	b.n	800366e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	3b01      	subs	r3, #1
 800365c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800366c:	d0ea      	beq.n	8003644 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367a:	2200      	movs	r2, #0
 800367c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368a:	2200      	movs	r2, #0
 800368c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800369c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2200      	movs	r2, #0
 80036a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b0:	2200      	movs	r2, #0
 80036b2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c0:	2200      	movs	r2, #0
 80036c2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0201 	bic.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b60      	cmp	r3, #96	; 0x60
 80036de:	d10e      	bne.n	80036fe <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	2200      	movs	r2, #0
 80036f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80036f6:	6978      	ldr	r0, [r7, #20]
 80036f8:	f000 fd36 	bl	8004168 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036fc:	e027      	b.n	800374e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80036fe:	7cfb      	ldrb	r3, [r7, #19]
 8003700:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003704:	2b28      	cmp	r3, #40	; 0x28
 8003706:	d117      	bne.n	8003738 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003726:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	2200      	movs	r2, #0
 800372c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2228      	movs	r2, #40	; 0x28
 8003732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003736:	e007      	b.n	8003748 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003748:	6978      	ldr	r0, [r7, #20]
 800374a:	f000 fcf9 	bl	8004140 <HAL_I2C_ErrorCallback>
}
 800374e:	bf00      	nop
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20000000 	.word	0x20000000
 800375c:	14f8b589 	.word	0x14f8b589

08003760 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800376c:	4b13      	ldr	r3, [pc, #76]	; (80037bc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	08db      	lsrs	r3, r3, #3
 8003772:	4a13      	ldr	r2, [pc, #76]	; (80037c0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003774:	fba2 2303 	umull	r2, r3, r2, r3
 8003778:	0a1a      	lsrs	r2, r3, #8
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	3b01      	subs	r3, #1
 8003786:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d107      	bne.n	800379e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	f043 0220 	orr.w	r2, r3, #32
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e008      	b.n	80037b0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ac:	d0e9      	beq.n	8003782 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	20000000 	.word	0x20000000
 80037c0:	14f8b589 	.word	0x14f8b589

080037c4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80037d4:	d103      	bne.n	80037de <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80037dc:	e007      	b.n	80037ee <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80037e6:	d102      	bne.n	80037ee <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2208      	movs	r2, #8
 80037ec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
	...

080037fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e267      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d075      	beq.n	8003906 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800381a:	4b88      	ldr	r3, [pc, #544]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 030c 	and.w	r3, r3, #12
 8003822:	2b04      	cmp	r3, #4
 8003824:	d00c      	beq.n	8003840 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003826:	4b85      	ldr	r3, [pc, #532]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800382e:	2b08      	cmp	r3, #8
 8003830:	d112      	bne.n	8003858 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003832:	4b82      	ldr	r3, [pc, #520]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800383a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800383e:	d10b      	bne.n	8003858 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003840:	4b7e      	ldr	r3, [pc, #504]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d05b      	beq.n	8003904 <HAL_RCC_OscConfig+0x108>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d157      	bne.n	8003904 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e242      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003860:	d106      	bne.n	8003870 <HAL_RCC_OscConfig+0x74>
 8003862:	4b76      	ldr	r3, [pc, #472]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a75      	ldr	r2, [pc, #468]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	e01d      	b.n	80038ac <HAL_RCC_OscConfig+0xb0>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003878:	d10c      	bne.n	8003894 <HAL_RCC_OscConfig+0x98>
 800387a:	4b70      	ldr	r3, [pc, #448]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a6f      	ldr	r2, [pc, #444]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	4b6d      	ldr	r3, [pc, #436]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a6c      	ldr	r2, [pc, #432]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 800388c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	e00b      	b.n	80038ac <HAL_RCC_OscConfig+0xb0>
 8003894:	4b69      	ldr	r3, [pc, #420]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a68      	ldr	r2, [pc, #416]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 800389a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800389e:	6013      	str	r3, [r2, #0]
 80038a0:	4b66      	ldr	r3, [pc, #408]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a65      	ldr	r2, [pc, #404]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 80038a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d013      	beq.n	80038dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b4:	f7fd f9c0 	bl	8000c38 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038bc:	f7fd f9bc 	bl	8000c38 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b64      	cmp	r3, #100	; 0x64
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e207      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ce:	4b5b      	ldr	r3, [pc, #364]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f0      	beq.n	80038bc <HAL_RCC_OscConfig+0xc0>
 80038da:	e014      	b.n	8003906 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038dc:	f7fd f9ac 	bl	8000c38 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038e4:	f7fd f9a8 	bl	8000c38 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b64      	cmp	r3, #100	; 0x64
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e1f3      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f6:	4b51      	ldr	r3, [pc, #324]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f0      	bne.n	80038e4 <HAL_RCC_OscConfig+0xe8>
 8003902:	e000      	b.n	8003906 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d063      	beq.n	80039da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003912:	4b4a      	ldr	r3, [pc, #296]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 030c 	and.w	r3, r3, #12
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00b      	beq.n	8003936 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800391e:	4b47      	ldr	r3, [pc, #284]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003926:	2b08      	cmp	r3, #8
 8003928:	d11c      	bne.n	8003964 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800392a:	4b44      	ldr	r3, [pc, #272]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d116      	bne.n	8003964 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003936:	4b41      	ldr	r3, [pc, #260]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d005      	beq.n	800394e <HAL_RCC_OscConfig+0x152>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d001      	beq.n	800394e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e1c7      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800394e:	4b3b      	ldr	r3, [pc, #236]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	4937      	ldr	r1, [pc, #220]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 800395e:	4313      	orrs	r3, r2
 8003960:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003962:	e03a      	b.n	80039da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d020      	beq.n	80039ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800396c:	4b34      	ldr	r3, [pc, #208]	; (8003a40 <HAL_RCC_OscConfig+0x244>)
 800396e:	2201      	movs	r2, #1
 8003970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003972:	f7fd f961 	bl	8000c38 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800397a:	f7fd f95d 	bl	8000c38 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e1a8      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398c:	4b2b      	ldr	r3, [pc, #172]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0f0      	beq.n	800397a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003998:	4b28      	ldr	r3, [pc, #160]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	4925      	ldr	r1, [pc, #148]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	600b      	str	r3, [r1, #0]
 80039ac:	e015      	b.n	80039da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ae:	4b24      	ldr	r3, [pc, #144]	; (8003a40 <HAL_RCC_OscConfig+0x244>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b4:	f7fd f940 	bl	8000c38 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039bc:	f7fd f93c 	bl	8000c38 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e187      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ce:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d036      	beq.n	8003a54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d016      	beq.n	8003a1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ee:	4b15      	ldr	r3, [pc, #84]	; (8003a44 <HAL_RCC_OscConfig+0x248>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f4:	f7fd f920 	bl	8000c38 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039fc:	f7fd f91c 	bl	8000c38 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e167      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0e:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <HAL_RCC_OscConfig+0x240>)
 8003a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0x200>
 8003a1a:	e01b      	b.n	8003a54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a1c:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <HAL_RCC_OscConfig+0x248>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a22:	f7fd f909 	bl	8000c38 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a28:	e00e      	b.n	8003a48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a2a:	f7fd f905 	bl	8000c38 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d907      	bls.n	8003a48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e150      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	42470000 	.word	0x42470000
 8003a44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a48:	4b88      	ldr	r3, [pc, #544]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1ea      	bne.n	8003a2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 8097 	beq.w	8003b90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a62:	2300      	movs	r3, #0
 8003a64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a66:	4b81      	ldr	r3, [pc, #516]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10f      	bne.n	8003a92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a72:	2300      	movs	r3, #0
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	4b7d      	ldr	r3, [pc, #500]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	4a7c      	ldr	r2, [pc, #496]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a80:	6413      	str	r3, [r2, #64]	; 0x40
 8003a82:	4b7a      	ldr	r3, [pc, #488]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	60bb      	str	r3, [r7, #8]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a92:	4b77      	ldr	r3, [pc, #476]	; (8003c70 <HAL_RCC_OscConfig+0x474>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d118      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a9e:	4b74      	ldr	r3, [pc, #464]	; (8003c70 <HAL_RCC_OscConfig+0x474>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a73      	ldr	r2, [pc, #460]	; (8003c70 <HAL_RCC_OscConfig+0x474>)
 8003aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aaa:	f7fd f8c5 	bl	8000c38 <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab2:	f7fd f8c1 	bl	8000c38 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e10c      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac4:	4b6a      	ldr	r3, [pc, #424]	; (8003c70 <HAL_RCC_OscConfig+0x474>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f0      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d106      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x2ea>
 8003ad8:	4b64      	ldr	r3, [pc, #400]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003adc:	4a63      	ldr	r2, [pc, #396]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae4:	e01c      	b.n	8003b20 <HAL_RCC_OscConfig+0x324>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2b05      	cmp	r3, #5
 8003aec:	d10c      	bne.n	8003b08 <HAL_RCC_OscConfig+0x30c>
 8003aee:	4b5f      	ldr	r3, [pc, #380]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af2:	4a5e      	ldr	r2, [pc, #376]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003af4:	f043 0304 	orr.w	r3, r3, #4
 8003af8:	6713      	str	r3, [r2, #112]	; 0x70
 8003afa:	4b5c      	ldr	r3, [pc, #368]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afe:	4a5b      	ldr	r2, [pc, #364]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b00:	f043 0301 	orr.w	r3, r3, #1
 8003b04:	6713      	str	r3, [r2, #112]	; 0x70
 8003b06:	e00b      	b.n	8003b20 <HAL_RCC_OscConfig+0x324>
 8003b08:	4b58      	ldr	r3, [pc, #352]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0c:	4a57      	ldr	r2, [pc, #348]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b0e:	f023 0301 	bic.w	r3, r3, #1
 8003b12:	6713      	str	r3, [r2, #112]	; 0x70
 8003b14:	4b55      	ldr	r3, [pc, #340]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b18:	4a54      	ldr	r2, [pc, #336]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b1a:	f023 0304 	bic.w	r3, r3, #4
 8003b1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d015      	beq.n	8003b54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b28:	f7fd f886 	bl	8000c38 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b2e:	e00a      	b.n	8003b46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b30:	f7fd f882 	bl	8000c38 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e0cb      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b46:	4b49      	ldr	r3, [pc, #292]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0ee      	beq.n	8003b30 <HAL_RCC_OscConfig+0x334>
 8003b52:	e014      	b.n	8003b7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b54:	f7fd f870 	bl	8000c38 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b5a:	e00a      	b.n	8003b72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b5c:	f7fd f86c 	bl	8000c38 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e0b5      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b72:	4b3e      	ldr	r3, [pc, #248]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1ee      	bne.n	8003b5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b7e:	7dfb      	ldrb	r3, [r7, #23]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d105      	bne.n	8003b90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b84:	4b39      	ldr	r3, [pc, #228]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	4a38      	ldr	r2, [pc, #224]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 80a1 	beq.w	8003cdc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b9a:	4b34      	ldr	r3, [pc, #208]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d05c      	beq.n	8003c60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d141      	bne.n	8003c32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bae:	4b31      	ldr	r3, [pc, #196]	; (8003c74 <HAL_RCC_OscConfig+0x478>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7fd f840 	bl	8000c38 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bbc:	f7fd f83c 	bl	8000c38 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e087      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bce:	4b27      	ldr	r3, [pc, #156]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69da      	ldr	r2, [r3, #28]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	019b      	lsls	r3, r3, #6
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	085b      	lsrs	r3, r3, #1
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	041b      	lsls	r3, r3, #16
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	061b      	lsls	r3, r3, #24
 8003bfe:	491b      	ldr	r1, [pc, #108]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c04:	4b1b      	ldr	r3, [pc, #108]	; (8003c74 <HAL_RCC_OscConfig+0x478>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0a:	f7fd f815 	bl	8000c38 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c12:	f7fd f811 	bl	8000c38 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e05c      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c24:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0f0      	beq.n	8003c12 <HAL_RCC_OscConfig+0x416>
 8003c30:	e054      	b.n	8003cdc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c32:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <HAL_RCC_OscConfig+0x478>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c38:	f7fc fffe 	bl	8000c38 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c40:	f7fc fffa 	bl	8000c38 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e045      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c52:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <HAL_RCC_OscConfig+0x470>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f0      	bne.n	8003c40 <HAL_RCC_OscConfig+0x444>
 8003c5e:	e03d      	b.n	8003cdc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d107      	bne.n	8003c78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e038      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40007000 	.word	0x40007000
 8003c74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c78:	4b1b      	ldr	r3, [pc, #108]	; (8003ce8 <HAL_RCC_OscConfig+0x4ec>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d028      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d121      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d11a      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ca8:	4013      	ands	r3, r2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d111      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	085b      	lsrs	r3, r3, #1
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d107      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e000      	b.n	8003cde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40023800 	.word	0x40023800

08003cec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e0cc      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d00:	4b68      	ldr	r3, [pc, #416]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d90c      	bls.n	8003d28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d0e:	4b65      	ldr	r3, [pc, #404]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d16:	4b63      	ldr	r3, [pc, #396]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d001      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0b8      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d020      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d40:	4b59      	ldr	r3, [pc, #356]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	4a58      	ldr	r2, [pc, #352]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d58:	4b53      	ldr	r3, [pc, #332]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	4a52      	ldr	r2, [pc, #328]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d64:	4b50      	ldr	r3, [pc, #320]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	494d      	ldr	r1, [pc, #308]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d044      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d107      	bne.n	8003d9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8a:	4b47      	ldr	r3, [pc, #284]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d119      	bne.n	8003dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e07f      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d003      	beq.n	8003daa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003da6:	2b03      	cmp	r3, #3
 8003da8:	d107      	bne.n	8003dba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003daa:	4b3f      	ldr	r3, [pc, #252]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d109      	bne.n	8003dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e06f      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dba:	4b3b      	ldr	r3, [pc, #236]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e067      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dca:	4b37      	ldr	r3, [pc, #220]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f023 0203 	bic.w	r2, r3, #3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	4934      	ldr	r1, [pc, #208]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ddc:	f7fc ff2c 	bl	8000c38 <HAL_GetTick>
 8003de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003de2:	e00a      	b.n	8003dfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de4:	f7fc ff28 	bl	8000c38 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e04f      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfa:	4b2b      	ldr	r3, [pc, #172]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 020c 	and.w	r2, r3, #12
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d1eb      	bne.n	8003de4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e0c:	4b25      	ldr	r3, [pc, #148]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d20c      	bcs.n	8003e34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1a:	4b22      	ldr	r3, [pc, #136]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e22:	4b20      	ldr	r3, [pc, #128]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d001      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e032      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e40:	4b19      	ldr	r3, [pc, #100]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4916      	ldr	r1, [pc, #88]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d009      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e5e:	4b12      	ldr	r3, [pc, #72]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	490e      	ldr	r1, [pc, #56]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e72:	f000 f821 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 8003e76:	4602      	mov	r2, r0
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	091b      	lsrs	r3, r3, #4
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	490a      	ldr	r1, [pc, #40]	; (8003eac <HAL_RCC_ClockConfig+0x1c0>)
 8003e84:	5ccb      	ldrb	r3, [r1, r3]
 8003e86:	fa22 f303 	lsr.w	r3, r2, r3
 8003e8a:	4a09      	ldr	r2, [pc, #36]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e8e:	4b09      	ldr	r3, [pc, #36]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fc fe8c 	bl	8000bb0 <HAL_InitTick>

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40023c00 	.word	0x40023c00
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	080043dc 	.word	0x080043dc
 8003eb0:	20000000 	.word	0x20000000
 8003eb4:	20000004 	.word	0x20000004

08003eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ebc:	b090      	sub	sp, #64	; 0x40
 8003ebe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ec8:	2300      	movs	r3, #0
 8003eca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ed0:	4b59      	ldr	r3, [pc, #356]	; (8004038 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 030c 	and.w	r3, r3, #12
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d00d      	beq.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x40>
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	f200 80a1 	bhi.w	8004024 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <HAL_RCC_GetSysClockFreq+0x34>
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d003      	beq.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003eea:	e09b      	b.n	8004024 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003eec:	4b53      	ldr	r3, [pc, #332]	; (800403c <HAL_RCC_GetSysClockFreq+0x184>)
 8003eee:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003ef0:	e09b      	b.n	800402a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ef2:	4b53      	ldr	r3, [pc, #332]	; (8004040 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ef4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ef6:	e098      	b.n	800402a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ef8:	4b4f      	ldr	r3, [pc, #316]	; (8004038 <HAL_RCC_GetSysClockFreq+0x180>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f00:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f02:	4b4d      	ldr	r3, [pc, #308]	; (8004038 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d028      	beq.n	8003f60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f0e:	4b4a      	ldr	r3, [pc, #296]	; (8004038 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	099b      	lsrs	r3, r3, #6
 8003f14:	2200      	movs	r2, #0
 8003f16:	623b      	str	r3, [r7, #32]
 8003f18:	627a      	str	r2, [r7, #36]	; 0x24
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f20:	2100      	movs	r1, #0
 8003f22:	4b47      	ldr	r3, [pc, #284]	; (8004040 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f24:	fb03 f201 	mul.w	r2, r3, r1
 8003f28:	2300      	movs	r3, #0
 8003f2a:	fb00 f303 	mul.w	r3, r0, r3
 8003f2e:	4413      	add	r3, r2
 8003f30:	4a43      	ldr	r2, [pc, #268]	; (8004040 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f32:	fba0 1202 	umull	r1, r2, r0, r2
 8003f36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f38:	460a      	mov	r2, r1
 8003f3a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f3e:	4413      	add	r3, r2
 8003f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f44:	2200      	movs	r2, #0
 8003f46:	61bb      	str	r3, [r7, #24]
 8003f48:	61fa      	str	r2, [r7, #28]
 8003f4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003f52:	f7fc f93f 	bl	80001d4 <__aeabi_uldivmod>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f5e:	e053      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f60:	4b35      	ldr	r3, [pc, #212]	; (8004038 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	099b      	lsrs	r3, r3, #6
 8003f66:	2200      	movs	r2, #0
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	617a      	str	r2, [r7, #20]
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f72:	f04f 0b00 	mov.w	fp, #0
 8003f76:	4652      	mov	r2, sl
 8003f78:	465b      	mov	r3, fp
 8003f7a:	f04f 0000 	mov.w	r0, #0
 8003f7e:	f04f 0100 	mov.w	r1, #0
 8003f82:	0159      	lsls	r1, r3, #5
 8003f84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f88:	0150      	lsls	r0, r2, #5
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	ebb2 080a 	subs.w	r8, r2, sl
 8003f92:	eb63 090b 	sbc.w	r9, r3, fp
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003fa2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003fa6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003faa:	ebb2 0408 	subs.w	r4, r2, r8
 8003fae:	eb63 0509 	sbc.w	r5, r3, r9
 8003fb2:	f04f 0200 	mov.w	r2, #0
 8003fb6:	f04f 0300 	mov.w	r3, #0
 8003fba:	00eb      	lsls	r3, r5, #3
 8003fbc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fc0:	00e2      	lsls	r2, r4, #3
 8003fc2:	4614      	mov	r4, r2
 8003fc4:	461d      	mov	r5, r3
 8003fc6:	eb14 030a 	adds.w	r3, r4, sl
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	eb45 030b 	adc.w	r3, r5, fp
 8003fd0:	607b      	str	r3, [r7, #4]
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fde:	4629      	mov	r1, r5
 8003fe0:	028b      	lsls	r3, r1, #10
 8003fe2:	4621      	mov	r1, r4
 8003fe4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fe8:	4621      	mov	r1, r4
 8003fea:	028a      	lsls	r2, r1, #10
 8003fec:	4610      	mov	r0, r2
 8003fee:	4619      	mov	r1, r3
 8003ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	60fa      	str	r2, [r7, #12]
 8003ff8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ffc:	f7fc f8ea 	bl	80001d4 <__aeabi_uldivmod>
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	4613      	mov	r3, r2
 8004006:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004008:	4b0b      	ldr	r3, [pc, #44]	; (8004038 <HAL_RCC_GetSysClockFreq+0x180>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	0c1b      	lsrs	r3, r3, #16
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	3301      	adds	r3, #1
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004018:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800401a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004020:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004022:	e002      	b.n	800402a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004024:	4b05      	ldr	r3, [pc, #20]	; (800403c <HAL_RCC_GetSysClockFreq+0x184>)
 8004026:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800402a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800402c:	4618      	mov	r0, r3
 800402e:	3740      	adds	r7, #64	; 0x40
 8004030:	46bd      	mov	sp, r7
 8004032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004036:	bf00      	nop
 8004038:	40023800 	.word	0x40023800
 800403c:	00f42400 	.word	0x00f42400
 8004040:	017d7840 	.word	0x017d7840

08004044 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004048:	4b03      	ldr	r3, [pc, #12]	; (8004058 <HAL_RCC_GetHCLKFreq+0x14>)
 800404a:	681b      	ldr	r3, [r3, #0]
}
 800404c:	4618      	mov	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	20000000 	.word	0x20000000

0800405c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004060:	f7ff fff0 	bl	8004044 <HAL_RCC_GetHCLKFreq>
 8004064:	4602      	mov	r2, r0
 8004066:	4b05      	ldr	r3, [pc, #20]	; (800407c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	0a9b      	lsrs	r3, r3, #10
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	4903      	ldr	r1, [pc, #12]	; (8004080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004072:	5ccb      	ldrb	r3, [r1, r3]
 8004074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004078:	4618      	mov	r0, r3
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40023800 	.word	0x40023800
 8004080:	080043ec 	.word	0x080043ec

08004084 <nop>:
I2C_Slave *active_i2c_slave = NULL;

uint8_t receiveBuffer[128] = {0};
uint8_t sendBuffer[128] = {0};

void nop() {
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0

}
 8004088:	bf00      	nop
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
	...

08004094 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
	if (active_i2c_slave != NULL) {
 800409c:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <HAL_I2C_ListenCpltCallback+0x24>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d004      	beq.n	80040ae <HAL_I2C_ListenCpltCallback+0x1a>
		i2c_listenCompleteCallback(active_i2c_slave);
 80040a4:	4b04      	ldr	r3, [pc, #16]	; (80040b8 <HAL_I2C_ListenCpltCallback+0x24>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 f8e2 	bl	8004272 <i2c_listenCompleteCallback>
	}
}
 80040ae:	bf00      	nop
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	200000e8 	.word	0x200000e8

080040bc <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection,
		uint16_t AddrMatchCode) {
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	70fb      	strb	r3, [r7, #3]
 80040c8:	4613      	mov	r3, r2
 80040ca:	803b      	strh	r3, [r7, #0]
	if (active_i2c_slave != NULL) {
 80040cc:	4b07      	ldr	r3, [pc, #28]	; (80040ec <HAL_I2C_AddrCallback+0x30>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d006      	beq.n	80040e2 <HAL_I2C_AddrCallback+0x26>
		i2c_addrCallback(active_i2c_slave, TransferDirection, AddrMatchCode);
 80040d4:	4b05      	ldr	r3, [pc, #20]	; (80040ec <HAL_I2C_AddrCallback+0x30>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	883a      	ldrh	r2, [r7, #0]
 80040da:	78f9      	ldrb	r1, [r7, #3]
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 f894 	bl	800420a <i2c_addrCallback>
	}
}
 80040e2:	bf00      	nop
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	200000e8 	.word	0x200000e8

080040f0 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
	if (active_i2c_slave != NULL) {
 80040f8:	4b06      	ldr	r3, [pc, #24]	; (8004114 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d004      	beq.n	800410a <HAL_I2C_SlaveRxCpltCallback+0x1a>
		i2c_rxCompleteCallback(active_i2c_slave);
 8004100:	4b04      	ldr	r3, [pc, #16]	; (8004114 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4618      	mov	r0, r3
 8004106:	f000 f8d5 	bl	80042b4 <i2c_rxCompleteCallback>
	}
}
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	200000e8 	.word	0x200000e8

08004118 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	if (active_i2c_slave != NULL) {
 8004120:	4b06      	ldr	r3, [pc, #24]	; (800413c <HAL_I2C_SlaveTxCpltCallback+0x24>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d004      	beq.n	8004132 <HAL_I2C_SlaveTxCpltCallback+0x1a>
		i2c_txCompleteCallback(active_i2c_slave);
 8004128:	4b04      	ldr	r3, [pc, #16]	; (800413c <HAL_I2C_SlaveTxCpltCallback+0x24>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f000 f8e4 	bl	80042fa <i2c_txCompleteCallback>
	}
}
 8004132:	bf00      	nop
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	200000e8 	.word	0x200000e8

08004140 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
	if (active_i2c_slave != NULL) {
 8004148:	4b06      	ldr	r3, [pc, #24]	; (8004164 <HAL_I2C_ErrorCallback+0x24>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d004      	beq.n	800415a <HAL_I2C_ErrorCallback+0x1a>
		i2c_errorCallback(active_i2c_slave);
 8004150:	4b04      	ldr	r3, [pc, #16]	; (8004164 <HAL_I2C_ErrorCallback+0x24>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f000 f8ef 	bl	8004338 <i2c_errorCallback>
	}
}
 800415a:	bf00      	nop
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	200000e8 	.word	0x200000e8

08004168 <HAL_I2C_AbortCpltCallback>:

void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c) {
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
	if (active_i2c_slave != NULL) {
 8004170:	4b06      	ldr	r3, [pc, #24]	; (800418c <HAL_I2C_AbortCpltCallback+0x24>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d004      	beq.n	8004182 <HAL_I2C_AbortCpltCallback+0x1a>
		i2c_abortCompleteCallback(active_i2c_slave);
 8004178:	4b04      	ldr	r3, [pc, #16]	; (800418c <HAL_I2C_AbortCpltCallback+0x24>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f000 f8ea 	bl	8004356 <i2c_abortCompleteCallback>
	}
}
 8004182:	bf00      	nop
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	200000e8 	.word	0x200000e8

08004190 <i2c_slave_init>:


void i2c_slave_init(I2C_Slave* slave) {
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
	slave->sendBuffer = sendBuffer;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a12      	ldr	r2, [pc, #72]	; (80041e4 <i2c_slave_init+0x54>)
 800419c:	60da      	str	r2, [r3, #12]
	slave->receiveBuffer = receiveBuffer;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a11      	ldr	r2, [pc, #68]	; (80041e8 <i2c_slave_init+0x58>)
 80041a2:	609a      	str	r2, [r3, #8]


	slave->received_bytes=0;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	715a      	strb	r2, [r3, #5]
	slave->sent_bytes=0;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	719a      	strb	r2, [r3, #6]
	slave->bufferAddress=0;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	741a      	strb	r2, [r3, #16]

	slave->hi2c->Init.OwnAddress1 = slave->address << 1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	7c5b      	ldrb	r3, [r3, #17]
 80041ba:	005a      	lsls	r2, r3, #1
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	60da      	str	r2, [r3, #12]

	  if (HAL_I2C_Init(slave->hi2c) != HAL_OK)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fd fc1c 	bl	8001a04 <HAL_I2C_Init>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <i2c_slave_init+0x46>
	  {
	    Error_Handler();
 80041d2:	f7fc fb87 	bl	80008e4 <Error_Handler>
	  }

	active_i2c_slave = slave;
 80041d6:	4a05      	ldr	r2, [pc, #20]	; (80041ec <i2c_slave_init+0x5c>)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6013      	str	r3, [r2, #0]


}
 80041dc:	bf00      	nop
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	2000016c 	.word	0x2000016c
 80041e8:	200000ec 	.word	0x200000ec
 80041ec:	200000e8 	.word	0x200000e8

080041f0 <i2c_slave_start>:

void i2c_slave_start(I2C_Slave* slave) {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(slave->hi2c);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fd fe2b 	bl	8001e58 <HAL_I2C_EnableListen_IT>
}
 8004202:	bf00      	nop
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <i2c_addrCallback>:


void i2c_addrCallback(I2C_Slave* slave,uint8_t TransferDirection, uint16_t AddrMatchCode) {
 800420a:	b580      	push	{r7, lr}
 800420c:	b082      	sub	sp, #8
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	460b      	mov	r3, r1
 8004214:	70fb      	strb	r3, [r7, #3]
 8004216:	4613      	mov	r3, r2
 8004218:	803b      	strh	r3, [r7, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT) {
 800421a:	78fb      	ldrb	r3, [r7, #3]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d113      	bne.n	8004248 <i2c_addrCallback+0x3e>
			slave->direction = I2C_SLAVE_DIRECTION_TRANSMIT;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	711a      	strb	r2, [r3, #4]
			if (slave->received_bytes == 0) {
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	795b      	ldrb	r3, [r3, #5]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <i2c_addrCallback+0x38>
				HAL_I2C_Slave_Seq_Receive_IT(slave->hi2c, &slave->bufferAddress, 1,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f103 0110 	add.w	r1, r3, #16
 8004238:	2304      	movs	r3, #4
 800423a:	2201      	movs	r2, #1
 800423c:	f7fd fd99 	bl	8001d72 <HAL_I2C_Slave_Seq_Receive_IT>
		} else if (TransferDirection == I2C_DIRECTION_RECEIVE) {
			slave->direction = I2C_SLAVE_DIRECTION_RECEIVE;
			HAL_I2C_Slave_Seq_Transmit_IT(slave->hi2c,
					&slave->sendBuffer[slave->bufferAddress], 1, I2C_NEXT_FRAME);
		}
}
 8004240:	e013      	b.n	800426a <i2c_addrCallback+0x60>
				nop();
 8004242:	f7ff ff1f 	bl	8004084 <nop>
}
 8004246:	e010      	b.n	800426a <i2c_addrCallback+0x60>
		} else if (TransferDirection == I2C_DIRECTION_RECEIVE) {
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10d      	bne.n	800426a <i2c_addrCallback+0x60>
			slave->direction = I2C_SLAVE_DIRECTION_RECEIVE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	711a      	strb	r2, [r3, #4]
			HAL_I2C_Slave_Seq_Transmit_IT(slave->hi2c,
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6818      	ldr	r0, [r3, #0]
					&slave->sendBuffer[slave->bufferAddress], 1, I2C_NEXT_FRAME);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	7c12      	ldrb	r2, [r2, #16]
			HAL_I2C_Slave_Seq_Transmit_IT(slave->hi2c,
 8004260:	1899      	adds	r1, r3, r2
 8004262:	2304      	movs	r3, #4
 8004264:	2201      	movs	r2, #1
 8004266:	f7fd fd11 	bl	8001c8c <HAL_I2C_Slave_Seq_Transmit_IT>
}
 800426a:	bf00      	nop
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <i2c_listenCompleteCallback>:

void i2c_listenCompleteCallback(I2C_Slave* slave){
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
	uint8_t rxbytes = slave->received_bytes;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	795b      	ldrb	r3, [r3, #5]
 800427e:	73fb      	strb	r3, [r7, #15]
	slave->received_bytes = 0;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	715a      	strb	r2, [r3, #5]
	slave->sent_bytes = 0;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	719a      	strb	r2, [r3, #6]
	HAL_I2C_EnableListen_IT(slave->hi2c);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4618      	mov	r0, r3
 8004292:	f7fd fde1 	bl	8001e58 <HAL_I2C_EnableListen_IT>

	if (slave->rxCallback != NULL) {
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d006      	beq.n	80042ac <i2c_listenCompleteCallback+0x3a>
		slave->rxCallback(slave->receiveBuffer, rxbytes);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6892      	ldr	r2, [r2, #8]
 80042a6:	7bf9      	ldrb	r1, [r7, #15]
 80042a8:	4610      	mov	r0, r2
 80042aa:	4798      	blx	r3
	}



}
 80042ac:	bf00      	nop
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <i2c_rxCompleteCallback>:
void i2c_rxCompleteCallback(I2C_Slave* slave){
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	slave->received_bytes++;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	795b      	ldrb	r3, [r3, #5]
 80042c0:	3301      	adds	r3, #1
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	715a      	strb	r2, [r3, #5]
		if (slave->received_bytes > 1) {
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	795b      	ldrb	r3, [r3, #5]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d905      	bls.n	80042dc <i2c_rxCompleteCallback+0x28>

			slave->bufferAddress++;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	7c1b      	ldrb	r3, [r3, #16]
 80042d4:	3301      	adds	r3, #1
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	741a      	strb	r2, [r3, #16]

		}
		HAL_I2C_Slave_Seq_Receive_IT(slave->hi2c,
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6818      	ldr	r0, [r3, #0]
				&slave->receiveBuffer[slave->bufferAddress], 1, I2C_NEXT_FRAME);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	7c12      	ldrb	r2, [r2, #16]
		HAL_I2C_Slave_Seq_Receive_IT(slave->hi2c,
 80042e8:	1899      	adds	r1, r3, r2
 80042ea:	2304      	movs	r3, #4
 80042ec:	2201      	movs	r2, #1
 80042ee:	f7fd fd40 	bl	8001d72 <HAL_I2C_Slave_Seq_Receive_IT>
}
 80042f2:	bf00      	nop
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <i2c_txCompleteCallback>:
void i2c_txCompleteCallback(I2C_Slave* slave){
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b082      	sub	sp, #8
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
	slave->bufferAddress++;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	7c1b      	ldrb	r3, [r3, #16]
 8004306:	3301      	adds	r3, #1
 8004308:	b2da      	uxtb	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	741a      	strb	r2, [r3, #16]
	slave->sent_bytes++;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	799b      	ldrb	r3, [r3, #6]
 8004312:	3301      	adds	r3, #1
 8004314:	b2da      	uxtb	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	719a      	strb	r2, [r3, #6]
		HAL_I2C_Slave_Seq_Transmit_IT(slave->hi2c,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
				&slave->sendBuffer[slave->bufferAddress], 1, I2C_NEXT_FRAME);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	7c12      	ldrb	r2, [r2, #16]
		HAL_I2C_Slave_Seq_Transmit_IT(slave->hi2c,
 8004326:	1899      	adds	r1, r3, r2
 8004328:	2304      	movs	r3, #4
 800432a:	2201      	movs	r2, #1
 800432c:	f7fd fcae 	bl	8001c8c <HAL_I2C_Slave_Seq_Transmit_IT>

}
 8004330:	bf00      	nop
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <i2c_errorCallback>:
void i2c_errorCallback(I2C_Slave* slave){
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
	nop();
 8004340:	f7ff fea0 	bl	8004084 <nop>
	HAL_I2C_EnableListen_IT(slave->hi2c);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f7fd fd85 	bl	8001e58 <HAL_I2C_EnableListen_IT>
}
 800434e:	bf00      	nop
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <i2c_abortCompleteCallback>:
void i2c_abortCompleteCallback(I2C_Slave* slave){
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]

}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
	...

0800436c <__libc_init_array>:
 800436c:	b570      	push	{r4, r5, r6, lr}
 800436e:	4d0d      	ldr	r5, [pc, #52]	; (80043a4 <__libc_init_array+0x38>)
 8004370:	4c0d      	ldr	r4, [pc, #52]	; (80043a8 <__libc_init_array+0x3c>)
 8004372:	1b64      	subs	r4, r4, r5
 8004374:	10a4      	asrs	r4, r4, #2
 8004376:	2600      	movs	r6, #0
 8004378:	42a6      	cmp	r6, r4
 800437a:	d109      	bne.n	8004390 <__libc_init_array+0x24>
 800437c:	4d0b      	ldr	r5, [pc, #44]	; (80043ac <__libc_init_array+0x40>)
 800437e:	4c0c      	ldr	r4, [pc, #48]	; (80043b0 <__libc_init_array+0x44>)
 8004380:	f000 f820 	bl	80043c4 <_init>
 8004384:	1b64      	subs	r4, r4, r5
 8004386:	10a4      	asrs	r4, r4, #2
 8004388:	2600      	movs	r6, #0
 800438a:	42a6      	cmp	r6, r4
 800438c:	d105      	bne.n	800439a <__libc_init_array+0x2e>
 800438e:	bd70      	pop	{r4, r5, r6, pc}
 8004390:	f855 3b04 	ldr.w	r3, [r5], #4
 8004394:	4798      	blx	r3
 8004396:	3601      	adds	r6, #1
 8004398:	e7ee      	b.n	8004378 <__libc_init_array+0xc>
 800439a:	f855 3b04 	ldr.w	r3, [r5], #4
 800439e:	4798      	blx	r3
 80043a0:	3601      	adds	r6, #1
 80043a2:	e7f2      	b.n	800438a <__libc_init_array+0x1e>
 80043a4:	080043fc 	.word	0x080043fc
 80043a8:	080043fc 	.word	0x080043fc
 80043ac:	080043fc 	.word	0x080043fc
 80043b0:	08004400 	.word	0x08004400

080043b4 <memset>:
 80043b4:	4402      	add	r2, r0
 80043b6:	4603      	mov	r3, r0
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d100      	bne.n	80043be <memset+0xa>
 80043bc:	4770      	bx	lr
 80043be:	f803 1b01 	strb.w	r1, [r3], #1
 80043c2:	e7f9      	b.n	80043b8 <memset+0x4>

080043c4 <_init>:
 80043c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c6:	bf00      	nop
 80043c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ca:	bc08      	pop	{r3}
 80043cc:	469e      	mov	lr, r3
 80043ce:	4770      	bx	lr

080043d0 <_fini>:
 80043d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d2:	bf00      	nop
 80043d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d6:	bc08      	pop	{r3}
 80043d8:	469e      	mov	lr, r3
 80043da:	4770      	bx	lr
